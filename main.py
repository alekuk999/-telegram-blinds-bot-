import os
import threading
import time
import logging
from datetime import datetime

# === –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ ===
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

import sqlite3
from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤ Render
PORT = int(os.getenv("PORT", 10000))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def add_sample_data():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –¢–æ–≤–∞—Ä—ã
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è", 2490.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/4b6cb7/white?text=–î–µ–Ω—å-–ù–æ—á—å"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–°—Ç–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω", 3290.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/182848/white?text=–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –∂–∞–ª—é–∑–∏", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∂–∞–ª—é–∑–∏ —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞", 1890.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/3a5ca5/white?text=–ê–ª—é–º–∏–Ω–∏–π"),
            ("–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º", 3990.0, "–®—Ç–æ—Ä—ã", "https://placehold.co/300x200/ff6b6b/white?text=–†–∏–º—Å–∫–∏–µ"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –ø–æ–ª–æ—Å–∞–º–∏", 2790.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/27ae60/white?text=–ó–µ–±—Ä–∞"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞", 4590.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/f39c12/white?text=–î–µ—Ä–µ–≤–æ")
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)

    # SMM –∫–æ–Ω—Ç–µ–Ω—Ç
    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        smm_content = [
            ("5 –ø—Ä–∏—á–∏–Ω –≤—ã–±—Ä–∞—Ç—å —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –û–Ω–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã, –∫—Ä–∞—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã!", "https://placehold.co/600x400/4b6cb7/white?text=–†—É–ª–æ–Ω–Ω—ã–µ+—à—Ç–æ—Ä—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∂–∞–ª—é–∑–∏ –¥–ª—è –∫—É—Ö–Ω–∏", "–ö—É—Ö–Ω—è —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∂–∞–ª—é–∑–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ!", "https://placehold.co/600x400/182848/white?text=–ñ–∞–ª—é–∑–∏+–¥–ª—è+–∫—É—Ö–Ω–∏", "–°–æ–≤–µ—Ç—ã", None, 1),
            ("–¢—Ä–µ–Ω–¥—ã 2023: –ß—Ç–æ –≤ –º–æ–¥–µ —É —à—Ç–æ—Ä", "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–æ–¥–æ–π –∏ –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –≥–ª–∞–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –º–∏—Ä–µ —à—Ç–æ—Ä —ç—Ç–æ–≥–æ –≥–æ–¥–∞.", "https://placehold.co/600x400/ff6b6b/white?text=–¢—Ä–µ–Ω–¥—ã+2023", "–¢—Ä–µ–Ω–¥—ã", None, 1),
            ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –¢–∫–∞–Ω—å vs –ü–í–•", "–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä? –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ –ø–ª—é—Å–∞—Ö –∏ –º–∏–Ω—É—Å–∞—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", "https://placehold.co/600x400/27ae60/white?text=–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–î–∏–∑–∞–π–Ω —Å–ø–∞–ª—å–Ω–∏ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ —à—Ç–æ—Ä–∞–º–∏", "–°–æ–∑–¥–∞–π—Ç–µ —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —à—Ç–æ—Ä!", "https://placehold.co/600x400/f39c12/white?text=–î–∏–∑–∞–π–Ω+—Å–ø–∞–ª—å–Ω–∏", "–î–∏–∑–∞–π–Ω", None, 1)
        ]
        cursor.executemany("INSERT INTO smm_content (title, content, image_url, category, scheduled_time, is_published) VALUES (?, ?, ?, ?, ?, ?)", smm_content)

    conn.commit()
    conn.close()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def save_subscriber(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO subscribers (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    finally:
        conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO messages (user_id, message, is_from_user)
            VALUES (?, ?, ?)
        ''', (user_id, text, is_from_user))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.from_user)
    save_message(message.from_user.id, message.text, True)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥", "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üì¢ –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("‚ÑπÔ∏è –û –Ω–∞—Å", "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
    bot.reply_to(message, "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlindStyle!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_help(message):
    save_message(message.from_user.id, message.text, True)
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
    bot.reply_to(message, help_text)

@bot.message_handler(func=lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    save_message(message.from_user.id, message.text, True)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    if products:
        bot.reply_to(message, "üìã –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")
        for p in products:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{p[0]}"),
                types.InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{p[0]}")
            )
            bot.send_photo(message.chat.id, p[5], caption=f"<b>{p[1]}</b>\n{p[2]}\nüí∞ {p[3]:.2f} —Ä—É–±.", parse_mode='HTML', reply_markup=markup)
    else:
        bot.reply_to(message, "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")

# === üîç –≠–•–û-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ.
@bot.message_handler(func=lambda message: True)
def debug_echo_handler(message):
    user_info = f"ID: {message.from_user.id}, –ò–º—è: {message.from_user.first_name}"
    print(f"üì© [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}: '{message.text}'")
    # bot.reply_to(message, "üîß [DEBUG] –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!") # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞ —ç—Ö–∞

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª ===
def send_scheduled_posts():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    while True:
        try:
            now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()

            cursor.execute("""
                SELECT id, title, content, image_url, category 
                FROM smm_content 
                WHERE is_published = 0 
                AND scheduled_time <= ?
                ORDER BY scheduled_time
                LIMIT 1
            """, (now,))

            row = cursor.fetchone()
            if row:
                content_id, title, content, image_url, category = row
                message = f"""
üìå <b>{title}</b>

{content}

#{category.replace(' ', '_')}
                """
                try:
                    if image_url and "placeholder" not in image_url.lower():
                        bot.send_photo(CHANNEL_ID, image_url.strip(), caption=message, parse_mode='HTML')
                    else:
                        bot.send_message(CHANNEL_ID, message, parse_mode='HTML')
                    cursor.execute("UPDATE smm_content SET is_published = 1 WHERE id = ?", (content_id,))
                    conn.commit()
                    print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")
            conn.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def start_autoposting():
    thread = threading.Thread(target=send_scheduled_posts, daemon=True)
    thread.start()
    print("üßµ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

# === üî• –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /webhook ===
@app.route('/webhook', methods=['POST'])
def webhook():
    """
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram API.
    """
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ health-check) ===
@app.route('/')
def home():
    return jsonify({
        "status": "running",
        "service": "BlindStyle SMM Bot Service",
        "version": "1.2",
        "message": "Bot is online. Webhook is set to /webhook"
    }), 200

# === HEAD / –¥–ª—è Gunicorn ===
@app.route('/', methods=['HEAD'])
def head():
    return '', 200

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
def set_webhook():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞.
    """
    webhook_url = f"https://telegram-blinds-bot-1.onrender.com/webhook"
    print(f"üîß –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")

    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        result_remove = bot.remove_webhook()
        print(f"üóë –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω: {result_remove}")

        # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        time.sleep(1)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        result_set = bot.set_webhook(url=webhook_url)
        if result_set:
            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –º–µ—Ç–æ–¥ set_webhook –≤–µ—Ä–Ω—É–ª False –¥–ª—è URL: {webhook_url}")

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        import traceback
        traceback.print_exc()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
def initialize():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    init_db()
    add_sample_data()
    set_webhook()
    start_autoposting()
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# üî•üî•üî• –í–ê–ñ–ù–ï–ô–®–ê–Ø –ß–ê–°–¢–¨ üî•üî•üî•
# –í—ã–∑—ã–≤–∞–µ–º initialize() –°–†–ê–ó–£, –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è.
# –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render —Å Gunicorn.
initialize()

# === –ó–∞–ø—É—Å–∫ (Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Gunicorn, —ç—Ç–æ—Ç –±–ª–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è) ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
