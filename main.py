
from flask import Flask, request
from telegram import Update
from telegram.ext import Application
import os
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === üîë –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# === üåê –ü–æ—Ä—Ç –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
PORT = int(os.getenv("PORT", 8080))
app = Flask(__name__)

# === üß© –°–æ–∑–¥–∞—ë–º Application (–ø–æ–∫–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞) ===
application = None

# === ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π) ===
@app.route('/webhook/<string:token>', methods=['POST'])
def webhook(token):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if token != BOT_TOKEN:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        return 'Unauthorized', 401

    if not request.is_json:
        logger.warning("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –∑–∞–ø—Ä–æ—Å")
        return 'Bad Request', 400

    global application
    if application is None:
        logger.error("‚ùå application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return 'Server Error', 500

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        update = Update.de_json(request.get_json(), application.bot)
        asyncio.run(application.process_update(update))
        return 'OK', 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return 'Internal Server Error', 500

# === üè† Health check ===
@app.route('/')
def health():
    return '<h1>‚úÖ Blinds Bot is Running</h1>', 200

# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def setup_bot():
    global application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # application.add_handler(...)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}.onrender.com/webhook/{BOT_TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

# === üî• –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    asyncio.run(setup_bot())
    app.run(host="0.0.0.0", port=PORT)
