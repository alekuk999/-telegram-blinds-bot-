from flask import Flask, request, jsonify
import telebot
from telebot import types
import sqlite3
from datetime import datetime
import threading
import os
import random

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render
BOT_TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://your-app-name.onrender.com')
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è SMM –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def add_sample_data():
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è", 2490.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/4b6cb7/white?text=–î–µ–Ω—å-–ù–æ—á—å"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–°—Ç–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω", 3290.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/182848/white?text=–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –∂–∞–ª—é–∑–∏", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∂–∞–ª—é–∑–∏ —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞", 1890.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/3a5ca5/white?text=–ê–ª—é–º–∏–Ω–∏–π"),
            ("–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º", 3990.0, "–®—Ç–æ—Ä—ã", "https://placehold.co/300x200/ff6b6b/white?text=–†–∏–º—Å–∫–∏–µ"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –ø–æ–ª–æ—Å–∞–º–∏", 2790.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/27ae60/white?text=–ó–µ–±—Ä–∞"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞", 4590.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/f39c12/white?text=–î–µ—Ä–µ–≤–æ")
        ]
        
        cursor.executemany(
            "INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)",
            products
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ SMM –∫–æ–Ω—Ç–µ–Ω—Ç
    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SMM –∫–æ–Ω—Ç–µ–Ω—Ç
        smm_content = [
            ("5 –ø—Ä–∏—á–∏–Ω –≤—ã–±—Ä–∞—Ç—å —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –û–Ω–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã, –∫—Ä–∞—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã!", "https://placehold.co/600x400/4b6cb7/white?text=–†—É–ª–æ–Ω–Ω—ã–µ+—à—Ç–æ—Ä—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∂–∞–ª—é–∑–∏ –¥–ª—è –∫—É—Ö–Ω–∏", "–ö—É—Ö–Ω—è —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∂–∞–ª—é–∑–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ!", "https://placehold.co/600x400/182848/white?text=–ñ–∞–ª—é–∑–∏+–¥–ª—è+–∫—É—Ö–Ω–∏", "–°–æ–≤–µ—Ç—ã", None, 1),
            ("–¢—Ä–µ–Ω–¥—ã 2023: –ß—Ç–æ –≤ –º–æ–¥–µ —É —à—Ç–æ—Ä", "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–æ–¥–æ–π –∏ –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –≥–ª–∞–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –º–∏—Ä–µ —à—Ç–æ—Ä —ç—Ç–æ–≥–æ –≥–æ–¥–∞.", "https://placehold.co/600x400/ff6b6b/white?text=–¢—Ä–µ–Ω–¥—ã+2023", "–¢—Ä–µ–Ω–¥—ã", None, 1),
            ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –¢–∫–∞–Ω—å vs –ü–í–•", "–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä? –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ –ø–ª—é—Å–∞—Ö –∏ –º–∏–Ω—É—Å–∞—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", "https://placehold.co/600x400/27ae60/white?text=–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–î–∏–∑–∞–π–Ω —Å–ø–∞–ª—å–Ω–∏ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ —à—Ç–æ—Ä–∞–º–∏", "–°–æ–∑–¥–∞–π—Ç–µ —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —à—Ç–æ—Ä!", "https://placehold.co/600x400/f39c12/white?text=–î–∏–∑–∞–π–Ω+—Å–ø–∞–ª—å–Ω–∏", "–î–∏–∑–∞–π–Ω", None, 1)
        ]
        
        cursor.executemany(
            "INSERT INTO smm_content (title, content, image_url, category, scheduled_time, is_published) VALUES (?, ?, ?, ?, ?, ?)",
            smm_content
        )
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    save_user(message.from_user)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    save_message(message.from_user.id, message.text, True)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥", "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üì¢ –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("‚ÑπÔ∏è –û –Ω–∞—Å", "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
    
    welcome_text = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlindStyle!

–ú—ã —Å–æ–∑–¥–∞–µ–º —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤ –≤–∞—à–µ–º –¥–æ–º–µ —Å –ø–æ–º–æ—â—å—é:
‚Ä¢ ‚ú® –ö—Ä–∞—Å–∏–≤—ã—Ö –∂–∞–ª—é–∑–∏ –∏ —à—Ç–æ—Ä
‚Ä¢ üìè –¢–æ—á–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞
‚Ä¢ üõ† –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:
    """
    
    bot.reply_to(message, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_help(message):
    save_message(message.from_user.id, message.text, True)
    
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
/order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
/channel - –ù–∞—à Telegram –∫–∞–Ω–∞–ª
/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã
/about - –û –∫–æ–º–ø–∞–Ω–∏–∏
/help - –ü–æ–º–æ—â—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
    """
    
    bot.reply_to(message, help_text)

@bot.message_handler(func=lambda message: message.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    save_message(message.from_user.id, message.text, True)
    
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    
    if products:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞—Ç–∞–ª–æ–≥–æ–º
        bot.reply_to(message, "üìã –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")
        
        for product in products:
            markup = types.InlineKeyboardMarkup()
            order_btn = types.InlineKeyboardButton(
                "üõí –ó–∞–∫–∞–∑–∞—Ç—å", 
                callback_data=f"order_{product[0]}"
            )
            details_btn = types.InlineKeyboardButton(
                "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", 
                callback_data=f"details_{product[0]}"
            )
            markup.add(details_btn, order_btn)
            
            product_text = f"""
<b>{product[1]}</b>

{product[2]}

üí∞ <b>–¶–µ–Ω–∞: {product[3]:.2f} —Ä—É–±.</b>

üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}
            """
            
            try:
                bot.send_photo(
                    message.chat.id, 
                    product[5], 
                    caption=product_text, 
                    parse_mode='HTML',
                    reply_markup=markup
                )
            except:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                bot.send_message(
                    message.chat.id, 
                    product_text, 
                    parse_mode='HTML',
                    reply_markup=markup
                )
    else:
        bot.reply_to(message, "üìã –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
def start_order(message):
    save_message(message.from_user.id, message.text, True)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    
    bot.reply_to(message, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì¢ –ö–∞–Ω–∞–ª")
def show_channel(message):
    save_message(message.from_user.id, message.text, True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
    save_subscriber(message.from_user)
    
    channel_text = """
üì¢ –ù–∞—à Telegram –∫–∞–Ω–∞–ª - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ üí° –õ–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –≤—ã–±–æ—Ä—É –∂–∞–ª—é–∑–∏
‚Ä¢ üé® –ò–¥–µ–∏ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞
‚Ä¢ üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: @blindstyle_channel
(–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π!)
    """
    
    markup = types.InlineKeyboardMarkup()
    channel_btn = types.InlineKeyboardButton(
        "üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", 
        url="https://t.me/blindstyle_channel"
    )
    markup.add(channel_btn)
    
    bot.reply_to(message, channel_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    save_message(message.from_user.id, message.text, True)
    
    contacts_text = """
üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

üè™ –ú–∞–≥–∞–∑–∏–Ω "BlindStyle"
üìç –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 15
üöá –ú–µ—Ç—Ä–æ: –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è
‚è∞ –ü–Ω-–í—Å 10:00-20:00

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
üìß Email: info@blindstyle.ru
üåê –°–∞–π—Ç: www.blindstyle.ru

üí¨ Telegram: @blindstyle_manager
    """
    
    markup = types.InlineKeyboardMarkup()
    contact_btn = types.InlineKeyboardButton(
        "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", 
        url="tel:+74951234567"
    )
    markup.add(contact_btn)
    
    bot.reply_to(message, contacts_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
def show_about(message):
    save_message(message.from_user.id, message.text, True)
    
    about_text = """
 blinds –∏ —à—Ç–æ—Ä —Å 2010 –≥–æ–¥–∞!

üèÜ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:
‚Ä¢ ‚úÖ 13 –ª–µ—Ç –æ–ø—ã—Ç–∞
‚Ä¢ üë• 1000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è 3 –≥–æ–¥–∞
‚Ä¢ üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
‚Ä¢ üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ üîß –ü—Ä–æ—Ñ–∏ –º–æ–Ω—Ç–∞–∂

üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏:
‚Ä¢ üìè –ó–∞–º–µ—Ä –æ–∫–æ–Ω
‚Ä¢ üè≠ –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥ –∑–∞–∫–∞–∑
‚Ä¢ üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –º–æ–Ω—Ç–∞–∂
‚Ä¢ üîß –†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    """
    
    bot.reply_to(message, about_text)

@bot.message_handler(func=lambda message: message.text == "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
def show_useful(message):
    save_message(message.from_user.id, message.text, True)
    
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM smm_content WHERE is_published = 1 ORDER BY created_at DESC LIMIT 5")
    content_list = cursor.fetchall()
    conn.close()
    
    if content_list:
        bot.reply_to(message, "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–∞—Å:")
        
        for content in content_list:
            content_text = f"""
<b>{content[1]}</b>

{content[2]}

#{content[4].replace(' ', '_')}
            """
            
            try:
                bot.send_photo(
                    message.chat.id, 
                    content[3], 
                    caption=content_text, 
                    parse_mode='HTML'
                )
            except:
                bot.send_message(
                    message.chat.id, 
                    content_text, 
                    parse_mode='HTML'
                )
    else:
        bot.reply_to(message, "üìö –ü–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    save_message(message.from_user.id, message.text, True)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥", "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üì¢ –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("‚ÑπÔ∏è –û –Ω–∞—Å", "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def handle_order(call):
    product_id = int(call.data.split('_')[1])
    
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()
    
    if product:
        bot.answer_callback_query(call.id, "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
        
        order_text = f"""
üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:

<b>{product[0]}</b>

üí∞ –¶–µ–Ω–∞: {product[1]:.2f} —Ä—É–±.

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
1. –í–∞—à–µ –∏–º—è
2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
3. –ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        """
        
        msg = bot.send_message(call.message.chat.id, order_text, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_order_step1, product_id, product)

def process_order_step1(message, product_id, product):
    save_message(message.from_user.id, message.text, True)
    
    user_data = {
        'product_id': product_id,
        'product_name': product[0],
        'user_name': message.text
    }
    
    msg = bot.reply_to(message, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(msg, process_order_step2, user_data)

def process_order_step2(message, user_data):
    save_message(message.from_user.id, message.text, True)
    
    user_data['phone'] = message.text
    
    msg = bot.reply_to(message, "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(msg, process_order_step3, user_data)

def process_order_step3(message, user_data):
    save_message(message.from_user.id, message.text, True)
    
    user_data['address'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, product_id, user_name, phone, address)
        VALUES (?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        user_data['product_id'],
        user_data['user_name'],
        user_data['phone'],
        user_data['address']
    ))
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    confirmation_text = f"""
‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}
üõç –¢–æ–≤–∞—Ä: {user_data['product_name']}
üë§ –ò–º—è: {user_data['user_name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}
üìç –ê–¥—Ä–µ—Å: {user_data['address']}

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä BlindStyle! üôè
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥", "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üì¢ –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("‚ÑπÔ∏è –û –Ω–∞—Å", "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
    
    bot.reply_to(message, confirmation_text, reply_markup=markup)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_notification = f"""
üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!

üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}
üõç –¢–æ–≤–∞—Ä: {user_data['product_name']}
üë§ –ö–ª–∏–µ–Ω—Ç: {user_data['user_name']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}
üìç –ê–¥—Ä–µ—Å: {user_data['address']}
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """
    
    print(admin_notification)  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Render

@bot.callback_query_handler(func=lambda call: call.data.startswith('details_'))
def handle_details(call):
    product_id = int(call.data.split('_')[1])
    
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()
    
    if product:
        details_text = f"""
<b>{product[1]}</b>

{product[2]}

üí∞ <b>–¶–µ–Ω–∞: {product[3]:.2f} —Ä—É–±.</b>
üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[4]}

üìè –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ò–∑–º–µ—Ä—è–π—Ç–µ –æ–∫–Ω–æ —Ç–æ—á–Ω–æ
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—é

üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
‚Ä¢ –ü—Ä–æ—Ñ–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫
‚Ä¢ –°–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

üöö –î–æ—Å—Ç–∞–≤–∫–∞:
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 5000 —Ä—É–±.
‚Ä¢ –°—Ä–æ—á–Ω–æ –∑–∞ 24 —á–∞—Å–∞
        """
        
        markup = types.InlineKeyboardMarkup()
        order_btn = types.InlineKeyboardButton(
            "üõí –ó–∞–∫–∞–∑–∞—Ç—å", 
            callback_data=f"order_{product[0]}"
        )
        markup.add(order_btn)
        
        try:
            bot.edit_message_caption(
                caption=details_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except:
            bot.send_message(
                call.message.chat.id,
                details_text,
                parse_mode='HTML',
                reply_markup=markup
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    save_message(message.from_user.id, message.text, True)
    
    response_text = """
ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
üõç –ö–∞—Ç–∞–ª–æ–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
üéØ –ó–∞–∫–∞–∑–∞—Ç—å - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
üì¢ –ö–∞–Ω–∞–ª - –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã - –Ω–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚ÑπÔ∏è –û –Ω–∞—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
üìö –ü–æ–ª–µ–∑–Ω–æ–µ - —Å–æ–≤–µ—Ç—ã –∏ —Å—Ç–∞—Ç—å–∏
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç –ö–∞—Ç–∞–ª–æ–≥", "üéØ –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üì¢ –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("‚ÑπÔ∏è –û –Ω–∞—Å", "üìö –ü–æ–ª–µ–∑–Ω–æ–µ")
    
    bot.reply_to(message, response_text, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def save_user(user):
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, registered_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def save_subscriber(user):
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO subscribers 
            (user_id, username, first_name, last_name, subscribed_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    finally:
        conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect('blinds_bot.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO messages (user_id, message, is_from_user, created_at)
            VALUES (?, ?, ?, ?)
        ''', (
            user_id,
            text,
            is_from_user,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è SMM –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.route('/')
def index():
    return jsonify({
        "status": "running",
        "service": "BlindStyle SMM Bot Service",
        "version": "1.0"
    })

@app.route('/api/stats')
def get_stats():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        cursor.execute("SELECT COUNT(*) FROM subscribers")
        subscribers_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute("""
            SELECT COUNT(*) FROM orders 
            WHERE DATE(created_at) = DATE('now')
        """)
        orders_today = cursor.fetchone()[0]
        
        # –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("""
            SELECT COUNT(*) FROM messages 
            WHERE is_from_user = 1 AND DATE(created_at) = DATE('now')
        """)
        new_messages = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        cursor.execute("SELECT COUNT(*) FROM smm_content WHERE is_published = 1")
        content_count = cursor.fetchone()[0]
        
        conn.close()
        
        return jsonify({
            'users': users_count,
            'subscribers': subscribers_count,
            'orders_today': orders_today,
            'new_messages': new_messages,
            'content_count': content_count
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/orders')
def get_orders():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT o.id, o.user_name, o.phone, o.address, o.status, o.created_at, p.name
            FROM orders o
            JOIN products p ON o.product_id = p.id
            ORDER BY o.created_at DESC
            LIMIT 20
        """)
        
        orders = cursor.fetchall()
        conn.close()
        
        orders_list = []
        for order in orders:
            orders_list.append({
                'id': order[0],
                'user_name': order[1],
                'phone': order[2],
                'address': order[3],
                'status': order[4],
                'created_at': order[5],
                'product_name': order[6]
            })
        
        return jsonify(orders_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/messages')
def get_messages():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT m.id, m.message, m.created_at, u.first_name, u.last_name
            FROM messages m
            JOIN users u ON m.user_id = u.user_id
            WHERE m.is_from_user = 1
            ORDER BY m.created_at DESC
            LIMIT 20
        """)
        
        messages = cursor.fetchall()
        conn.close()
        
        messages_list = []
        for message in messages:
            messages_list.append({
                'id': message[0],
                'text': message[1],
                'created_at': message[2],
                'user_name': f"{message[3] or ''} {message[4] or ''}".strip()
            })
        
        return jsonify(messages_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/products')
def get_products():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM products")
        products = cursor.fetchall()
        conn.close()
        
        products_list = []
        for product in products:
            products_list.append({
                'id': product[0],
                'name': product[1],
                'description': product[2],
                'price': product[3],
                'category': product[4],
                'image_url': product[5]
            })
        
        return jsonify(products_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/content')
def get_content():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM smm_content WHERE is_published = 1 ORDER BY created_at DESC")
        content = cursor.fetchall()
        conn.close()
        
        content_list = []
        for item in content:
            content_list.append({
                'id': item[0],
                'title': item[1],
                'content': item[2],
                'image_url': item[3],
                'category': item[4],
                'scheduled_time': item[5],
                'is_published': bool(item[6]),
                'created_at': item[7]
            })
        
        return jsonify(content_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/subscribers')
def get_subscribers():
    try:
        conn = sqlite3.connect('blinds_bot.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM subscribers ORDER BY subscribed_at DESC")
        subscribers = cursor.fetchall()
        conn.close()
        
        subscribers_list = []
        for subscriber in subscribers:
            subscribers_list.append({
                'id': subscriber[0],
                'user_id': subscriber[1],
                'username': subscriber[2],
                'first_name': subscriber[3],
                'last_name': subscriber[4],
                'subscribed_at': subscriber[5]
            })
        
        return jsonify(subscribers_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Message.de_json(json_str)
    bot.process_new_messages([update])
    return 'OK', 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def initialize_app():
    init_db()
    add_sample_data()
    set_webhook()

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initialize_app()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get('PORT', 5000))
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=port, debug=False)
