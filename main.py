# main.py
import os
import logging
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue
)
import asyncio
from datetime import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === üîë –¢–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

try:
    CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
except (TypeError, ValueError):
    logger.critical("‚ùå CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    exit(1)

# === üåê –ü–æ—Ä—Ç –∏ Flask ===
PORT = int(os.getenv("PORT", 8080))
app = Flask(__name__)

# === üì∏ –ö–æ–Ω—Ç–µ–Ω—Ç ===
TIPS = [
    "üí° <b>–°–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–ª—ç–∫–∞—É—Ç-—Ç–∫–∞–Ω—å?\n‚Äî –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –æ—Ç 300 –≥/–º¬≤",
    "üî• <b>–õ–∞–π—Ñ—Ö–∞–∫:</b>\n–ß–∏—Å—Ç–∏—Ç–µ –∂–∞–ª—é–∑–∏ –≤–ª–∞–∂–Ω–æ–π –≥—É–±–∫–æ–π —Å –∫–∞–ø–ª–µ–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ—Å—É–¥—ã"
]

PROMOS = [
    "üéâ <b>–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏!</b>\n–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏!\n–¢–æ–ª—å–∫–æ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è."
]

WORKS = [
    {
        "photo": "https://i.ibb.co/6YpZ1fL/roller-blinds.jpg",
        "caption": "‚ú® –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ\n‚Äî –£—Å—Ç–∞–Ω–æ–≤–∫–∞: 1 —á–∞—Å\n‚Äî –¶–µ–Ω–∞: –æ—Ç 2990 ‚ÇΩ\n–ó–∞–∫–∞–∑: @manager"
    }
]

# === üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
KEYBOARD = [
    ["üí° –°–æ–≤–µ—Ç", "üéâ –ê–∫—Ü–∏—è"],
    ["üñº –§–æ—Ç–æ", "üì¢ –ü–æ—Å—Ç"]
]
reply_markup = ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True)

# === üß© –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
application = None

# === üìù –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(TIPS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –°–æ–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")

async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(PROMOS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –ê–∫—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item = random.choice(WORKS)
    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=item["photo"],
            caption=item["caption"]
        )
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")

async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /post –ù–æ–≤–∏–Ω–∫–∞ ‚Äî —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å!")
        return
    text = " ".join(context.args)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")

# === üïê –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
async def daily_morning(context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(TIPS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        logger.info("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç—Ä–æ–º: {e}")

async def daily_afternoon(context: ContextTypes.DEFAULT_TYPE):
    item = random.choice(WORKS)
    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=item["photo"],
            caption=item["caption"]
        )
        logger.info("üå§Ô∏è –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–Ω—ë–º: {e}")

# === üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üí° –°–æ–≤–µ—Ç":
        await tip(update, context)
    elif text == "üéâ –ê–∫—Ü–∏—è":
        await promo(update, context)
    elif text == "üñº –§–æ—Ç–æ":
        await work(update, context)
    elif text == "üì¢ –ü–æ—Å—Ç":
        await post(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ===
@app.route('/webhook/<string:token>', methods=['POST'])
def webhook(token):
    if token != BOT_TOKEN:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        return 'Unauthorized', 401

    if not request.is_json:
        logger.warning("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –∑–∞–ø—Ä–æ—Å")
        return 'Bad Request', 400

    global application
    if application is None:
        logger.error("‚ùå application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return 'Server Error', 500

    try:
        update = Update.de_json(request.get_json(), application.bot)
        asyncio.run(application.process_update(update))
        return 'OK', 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 'Internal Server Error', 500

# === üè† Health check ===
@app.route('/')
def health():
    return '<h1>‚úÖ SMM Bot is Running</h1>', 200

# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def setup_bot():
    global application
    application = Application.builder().token(BOT_TOKEN).build()
    job_queue = application.job_queue

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    job_queue.run_daily(daily_morning, time(hour=10, minute=0))
    job_queue.run_daily(daily_afternoon, time(hour=15, minute=0))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tip", tip))
    application.add_handler(CommandHandler("promo", promo))
    application.add_handler(CommandHandler("work", work))
    application.add_handler(CommandHandler("post", post))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}.onrender.com/webhook/{BOT_TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    job_queue.start()

# === üî• –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    asyncio.run(setup_bot())
    app.run(host="0.0.0.0", port=PORT)
