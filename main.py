# main.py
import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib
import random
import requests
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@astra_jaluzi")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
MANAGER_CHAT_ID = 7126605143  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ (int)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
import telebot
from telebot import types

bot = telebot.TeleBot(BOT_TOKEN, threaded=True)

# === –ü—É—Ç—å –∫ –ë–î ===
DB_PATH = "blinds_bot.db"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    logger.info("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            weekday INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ===
def add_sample_data():
    logger.info("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            (
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å",
                "‚ú® *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π!*\n\n"
                "‚Ä¢ *–§—É–Ω–∫—Ü–∏—è*: –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –ø–ª–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –±–µ–∑ –ø–æ–¥—ä—ë–º–∞ —à—Ç–æ—Ä—ã.\n"
                "‚Ä¢ *–ú–∞—Ç–µ—Ä–∏–∞–ª*: –ü–æ–ª–∏—ç—Å—Ç–µ—Ä —Å –ø—Ä–æ–ø–∏—Ç–∫–æ–π ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –Ω–µ –≤–ø–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Ö–∏.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ë–µ–ª—ã–π, –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä—ã–π, –≥—Ä–∞—Ñ–∏—Ç.\n"
                "‚Ä¢ *–†–∞–∑–º–µ—Ä—ã*: –ü–æ–¥ –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 40 —Å–º –¥–æ 300 —Å–º –≤ —à–∏—Ä–∏–Ω—É.",
                0.0,
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã",
                "https://img.freepik.com/free-photo/modern-living-room-interior-design_1268-16720.jpg"
            ),
            (
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ",
                "üîß *–ö–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º!*\n\n"
                "‚Ä¢ *–ú–∞—Ç–µ—Ä–∏–∞–ª*: –ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –ª–∞–º–µ–ª–∏ 25 –º–º ‚Äî –ª—ë–≥–∫–∏–µ, –ø—Ä–æ—á–Ω—ã–µ, –Ω–µ —Ä–∂–∞–≤–µ—é—Ç.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ë–µ–ª—ã–π, —Å–µ—Ä–µ–±—Ä–æ, –∑–æ–ª–æ—Ç–æ, –¥–µ—Ä–µ–≤–æ, –º–µ—Ç–∞–ª–ª–∏–∫ ‚Äî –±–æ–ª–µ–µ 20 –æ—Ç—Ç–µ–Ω–∫–æ–≤.\n"
                "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –ü–æ–≤–æ—Ä–æ—Ç –ª–∞–º–µ–ª–µ–π –Ω–∞ 180¬∞ ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.\n"
                "‚Ä¢ *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ*: –ö—É—Ö–Ω—è, –≤–∞–Ω–Ω–∞—è, –±–∞–ª–∫–æ–Ω ‚Äî –Ω–µ –±–æ—è—Ç—Å—è –≤–ª–∞–≥–∏ –∏ –ø–∞—Ä–∞.",
                0.0,
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "https://img.freepik.com/free-photo/vertical-blinds-window_1268-17953.jpg"
            ),
            (
                "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ",
                "üåø *–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É—é—Ç –≤ –≤–∞—à–µ–º –¥–æ–º–µ!*\n\n"
                "‚Ä¢ *–¢–∫–∞–Ω—å*: –ü–ª–æ—Ç–Ω—ã–π –ø–æ–ª–∏—ç—Å—Ç–µ—Ä ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –Ω–µ –≤–ø–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Ö–∏, –ø–æ–≥–ª–æ—â–∞–µ—Ç —à—É–º.\n"
                "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∏ —Å–¥–≤–∏–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –ª–µ–≥–∫–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞ ‚Äî –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä—ã–π, –º–æ–ª–æ—á–Ω—ã–π, –ª–∞–≤–∞–Ω–¥–∞.\n"
                "‚Ä¢ *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ*: –ì–æ—Å—Ç–∏–Ω–∞—è, —Å–ø–∞–ª—å–Ω—è, –æ—Ñ–∏—Å ‚Äî —Å–æ–∑–¥–∞—é—Ç –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—Ä–∞.",
                0.0,
                "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "https://img.freepik.com/free-photo/vertical-blinds-living-room_1268-18021.jpg"
            )
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        logger.info("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        logger.info("‚ÑπÔ∏è [DB] –¢–∞–±–ª–∏—Ü–∞ smm_content –ø—É—Å—Ç–∞ ‚Äî –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å GPT.")

    conn.commit()
    conn.close()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                   (user.id, user.username, user.first_name, user.last_name))
    conn.commit()
    conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO messages (user_id, message, is_from_user) VALUES (?, ?, ?)',
                   (user_id, text, is_from_user))
    conn.commit()
    conn.close()

def notify_manager(user_name, phone):
    try:
        bot.send_message(
            MANAGER_CHAT_ID,
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!*\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT ===
def generate_post_with_yandex_gpt(product_name, product_description):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        logger.error("‚ùå YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, None

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}"  # ‚Üê –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!
    }
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∂–∞–ª—é–∑–∏ –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏.
–°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.

–¢–æ–≤–∞—Ä: {product_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
- –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏)
- 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: "–ù–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp –∏–ª–∏ Telegram!"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫",
    "content": "—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",
    "hashtags": ["#—Ö—ç—à—Ç–µ–≥1", "#—Ö—ç—à—Ç–µ–≥2", "#—Ö—ç—à—Ç–µ–≥3"]
}}
"""

    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [{"role": "user", "text": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']

        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            post_data = json.loads(json_match.group())
            full_content = f"{post_data['content']}\n\n{' '.join(post_data['hashtags'])}"
            return post_data['title'], full_content
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return None, None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {e}")
        return None, None

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ 10:00 UTC (13:00 –ú–°–ö) ===
def auto_generate_and_publish_post():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products ORDER BY RANDOM() LIMIT 1")
    product = cursor.fetchone()
    conn.close()

    if not product:
        logger.warning("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
        return

    name, desc, image_url = product
    title, content = generate_post_with_yandex_gpt(name, desc)

    if not title or not content:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return

    try:
        caption = f"üìå *{title}*\n\n{content}"
        if image_url.startswith("http"):
            bot.send_photo(CHANNEL_ID, image_url, caption=caption, parse_mode='Markdown')
        else:
            with open(image_url, 'rb') as f:
                bot.send_photo(CHANNEL_ID, f, caption=caption, parse_mode='Markdown')
        logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def send_scheduled_posts():
    logger.info("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    last_auto_post_day = None
    while True:
        try:
            now = datetime.utcnow()
            if now.hour == 10 and now.minute == 0:
                today = now.date()
                if last_auto_post_day != today:
                    auto_generate_and_publish_post()
                    last_auto_post_day = today
            time.sleep(60)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
            time.sleep(60)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.from_user)
    save_message(message.from_user.id, message.text, True)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìö –ö–∞—Ç–∞–ª–æ–≥", "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üîó –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("üí¨ WhatsApp", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    bot.reply_to(message, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    text = "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*"
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üßµ –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", callback_data="category_–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"),
        types.InlineKeyboardButton("ü™ü –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"),
        types.InlineKeyboardButton("üö™ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"),
        types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url="https://wa.me/79378222906"),
        types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call")
    )
    bot.reply_to(message, text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    category = call.data.split('_', 1)[1]
    bot.answer_callback_query(call.id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()

    if not products:
        bot.send_message(call.message.chat.id, f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}* –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", parse_mode='Markdown')
        return

    for name, desc, image_url in products:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"),
            types.InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/79378222906")
        )
        try:
            if image_url.startswith("http"):
                bot.send_photo(call.message.chat.id, image_url, caption=f"<b>{name}</b>\n{desc}", parse_mode='HTML', reply_markup=markup)
            else:
                with open(image_url, 'rb') as f:
                    bot.send_photo(call.message.chat.id, f, caption=f"<b>{name}</b>\n{desc}", parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è '{name}'.")

@bot.callback_query_handler(func=lambda call: call.data == "request_call")
def request_call_handler(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        "üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*, –∏ –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!\n\n"
        "üì± –í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É *¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª* –Ω–∏–∂–µ\n‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `+79271234567`)",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardMarkup(
            row_width=1, resize_keyboard=True, one_time_keyboard=True
        ).add(types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    )
    bot.register_next_step_handler(msg, process_phone_number, call.from_user.first_name)

def process_phone_number(message, user_name):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")
        return

    notify_manager(user_name, phone)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}!\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: `{phone}`\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    bot.reply_to(
        message,
        "üìç *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (937) 822-29-06\n"
        "üí¨ WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å](https://wa.me/79378222906)\n"
        "‚úâÔ∏è Telegram: [–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É](https://t.me/astra_jalyzi30)\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
        "üè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    bot.reply_to(
        message,
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ WhatsApp:\n\nhttps://wa.me/79378222906",
        reply_markup=types.InlineKeyboardMarkup([
            [types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://wa.me/79378222906")]
        ])
    )

@bot.message_handler(func=lambda m: m.text == "üîó –ö–∞–Ω–∞–ª")
def open_channel(message):
    bot.reply_to(message, f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n{CHANNEL_ID}")

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    bot.reply_to(
        message,
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞*:\n\n"
        "‚Ä¢ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ *–ó–∞–∫–∞–∑–∞—Ç—å* ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã* ‚Äî —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ *–ö–∞–Ω–∞–ª* ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ *WhatsApp* ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
        "üí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é!"
    )

# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    init_db()
    add_sample_data()

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=send_scheduled_posts, daemon=True).start()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling!")
    bot.polling(none_stop=True, interval=0, timeout=20)
