
# main.py
import os
import logging
import requests
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
    JobQueue
)
from datetime import time
from flask import Flask, request
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

try:
    CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
except (TypeError, ValueError):
    logger.error("‚ùå CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    exit(1)

# === üåê –ü–æ—Ä—Ç –∏ Flask ===
PORT = int(os.getenv("PORT", 8080))
app = Flask(__name__)

# === üì∏ –ö–æ–Ω—Ç–µ–Ω—Ç ===
TIPS = [
    "üí° <b>–°–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–ª—ç–∫–∞—É—Ç-—Ç–∫–∞–Ω—å?\n‚Äî –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –æ—Ç 300 –≥/–º¬≤",
    "üî• <b>–õ–∞–π—Ñ—Ö–∞–∫:</b>\n–ß–∏—Å—Ç–∏—Ç–µ –∂–∞–ª—é–∑–∏ –≤–ª–∞–∂–Ω–æ–π –≥—É–±–∫–æ–π —Å –∫–∞–ø–ª–µ–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ—Å—É–¥—ã"
]

PROMOS = [
    "üéâ <b>–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏!</b>\n–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏!\n–¢–æ–ª—å–∫–æ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è."
]

WORKS_STATIC = [
    {
        "photo": "https://i.ibb.co/6YpZ1fL/roller-blinds.jpg",
        "caption": "‚ú® –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ\n‚Äî –£—Å—Ç–∞–Ω–æ–≤–∫–∞: 1 —á–∞—Å\n‚Äî –¶–µ–Ω–∞: –æ—Ç 2990 ‚ÇΩ\n–ó–∞–∫–∞–∑: @manager"
    }
]

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—É–ª —Ñ–æ—Ç–æ
WORKS_DYNAMIC = []

# === üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
KEYBOARD = [
    ["üí° –°–æ–≤–µ—Ç", "üéâ –ê–∫—Ü–∏—è"],
    ["üñº –§–æ—Ç–æ", "üì¢ –ü–æ—Å—Ç"]
]
reply_markup = ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True)

# === üß© –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
application = None

# === üîç –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: Unsplash API ===
def fetch_blinds_photos():
    global WORKS_DYNAMIC
    UNSPLASH_KEY = os.getenv("UNSPLASH_KEY")
    if not UNSPLASH_KEY:
        return

    headers = {"Authorization": f"Client-ID {UNSPLASH_KEY}"}
    params = {
        "query": "blinds interior roller shades",
        "per_page": 10,
        "orientation": "landscape"
    }

    try:
        response = requests.get("https://api.unsplash.com/search/photos", headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        new_photos = []
        for item in data.get("results", []):
            photo_url = item["urls"]["regular"]
            author = item["user"]["name"]
            caption = (
                f"üñº –ò–Ω—Ç–µ—Ä—å–µ—Ä —Å –∂–∞–ª—é–∑–∏\n"
                f"üì∏ –ê–≤—Ç–æ—Ä: {author}\n"
                f"üîó –ß–µ—Ä–µ–∑ Unsplash\n"
                f"–ó–∞–∫–∞–∑: @manager"
            )
            new_photos.append({"photo": photo_url, "caption": caption})

        WORKS_DYNAMIC = (WORKS_DYNAMIC + new_photos)[-50:]
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_photos)} —Ñ–æ—Ç–æ —Å Unsplash")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def fetch_blinds_job(context: CallbackContext):
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, fetch_blinds_photos)

# === üìù –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_works = WORKS_STATIC + WORKS_DYNAMIC
    if not all_works:
        await update.message.reply_text("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
    item = random.choice(all_works)
    try:
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=item["photo"], caption=item["caption"])
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: tip, promo, post

# === ‚úÖ –í–µ–±—Ö—É–∫ ===
@app.route('/webhook/<string:token>', methods=['POST'])
def webhook(token):
    if token != TOKEN:
        return 'Unauthorized', 401
    if request.is_json:
        update = Update.de_json(request.get_json(), application.bot)
        asyncio.run(application.update_queue.put(update))
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/')
def health():
    return '<h1>‚úÖ SMM Bot is Running</h1>', 200

# === üöÄ –ó–∞–ø—É—Å–∫ ===
async def setup_bot():
    global application
    application = Application.builder().token(TOKEN).build()
    job_queue = application.job_queue

    job_queue.run_daily(fetch_blinds_job, time(hour=9, minute=0))
    job_queue.run_daily(daily_morning, time(hour=10, minute=0))
    job_queue.run_daily(daily_afternoon, time(hour=15, minute=0))

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("work", work))
    # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    await application.bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}.onrender.com/webhook/{TOKEN}")
    logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    job_queue.start()

if __name__ == '__main__':
    asyncio.run(setup_bot())
    app.run(host="0.0.0.0", port=PORT)
