import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib
import random
import requests
import re
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "-1002137931247")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
MANAGER_CHAT_ID = 7126605143

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN, threaded=True)
DB_PATH = "blinds_bot.db"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    logger.info("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            user_name TEXT,
            phone TEXT,
            status TEXT DEFAULT 'pending'
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def add_sample_data():
    logger.info("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "‚ú® –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –ø–ª–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –±–µ–∑ –ø–æ–¥—ä—ë–º–∞ —à—Ç–æ—Ä—ã.", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://i.imgur.com/5XJkR9l.jpg"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –±–ª—ç–∫–∞—É—Ç", "üåô 100% –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://i.imgur.com/L3GzF9P.jpg"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "üîß –ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –ª–∞–º–µ–ª–∏ 25 –º–º ‚Äî –ª—ë–≥–∫–∏–µ, –ø—Ä–æ—á–Ω—ã–µ, –Ω–µ —Ä–∂–∞–≤–µ—é—Ç.", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "https://i.imgur.com/8KfR2sT.jpg"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ", "üåø –ü–ª–æ—Ç–Ω—ã–π –ø–æ–ª–∏—ç—Å—Ç–µ—Ä ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –ø–æ–≥–ª–æ—â–∞–µ—Ç —à—É–º, —Å–æ–∑–¥–∞—ë—Ç —É—é—Ç.", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "https://i.imgur.com/rDkLmN7.jpg"),
        ]
        cursor.executemany("INSERT INTO products (name, description, category, image_url) VALUES (?, ?, ?, ?)", products)
        logger.info("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    conn.commit()
    conn.close()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ===
def save_call_request(user_id, first_name, phone_number):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, user_name, phone, status)
        VALUES (?, ?, ?, ?)
    ''', (user_id, first_name, phone_number, "pending"))
    conn.commit()
    conn.close()

def notify_manager(user_name, phone_number):
    try:
        bot.send_message(
            MANAGER_CHAT_ID,
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!</b>\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone_number}</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT ===
def generate_post_with_yandex_gpt(product_name, product_description):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        logger.error("‚ùå YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, None

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}"  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
    }
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏ –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏¬ª.
–°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–¢–æ–≤–∞—Ä: {product_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚â§ 50 —Å–∏–º–≤–æ–ª–æ–≤
- –¢–µ–∫—Å—Ç ‚â§ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏
- –•—ç—à—Ç–µ–≥–∏: #–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å #–ñ–∞–ª—é–∑–∏–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å –∏ –æ–¥–∏–Ω –ø–æ —Ç–µ–º–µ
- –ü—Ä–∏–∑—ã–≤: "–ù–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp –∏–ª–∏ Telegram!"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON:
{{
    "title": "...",
    "content": "...",
    "hashtags": ["...", "...", "..."]
}}
"""

    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [{"role": "user", "text": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']

        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            post_data = json.loads(json_match.group())
            full_content = f"{post_data['content']}\n\n{' '.join(post_data['hashtags'])}"
            return post_data['title'], full_content
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON")
            return None, None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {e}")
        return None, None

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
def auto_generate_and_publish_post():
    logger.info("üîç –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products ORDER BY RANDOM() LIMIT 1")
    product = cursor.fetchone()
    conn.close()

    if not product:
        logger.warning("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    name, desc, image_url = product
    title, content = generate_post_with_yandex_gpt(name, desc)

    if not title or not content:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return

    try:
        caption = f"üìå <b>{title}</b>\n\n{content}"
        if image_url and image_url.startswith("http"):
            bot.send_photo(CHANNEL_ID, image_url, caption=caption, parse_mode='HTML')
        else:
            bot.send_message(CHANNEL_ID, caption, parse_mode='HTML')
        logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def send_scheduled_posts():
    logger.info("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    last_day = None
    while True:
        now = datetime.utcnow()
        if now.hour == 10 and now.minute == 0:  # 10:00 UTC = 13:00 –ú–°–ö
            today = now.date()
            if last_day != today:
                auto_generate_and_publish_post()
                last_day = today
        time.sleep(60)

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìö –ö–∞—Ç–∞–ª–æ–≥", "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üí¨ WhatsApp")
    bot.reply_to(message, "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(commands=['testpost'])
def test_post(message):
    auto_generate_and_publish_post()
    bot.reply_to(message, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    bot.reply_to(
        message,
        "üìç <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (937) 822-29-06\n"
        "üí¨ WhatsApp: <a href='https://wa.me/79378222906'>–ù–∞–ø–∏—Å–∞—Ç—å</a>\n"
        "‚úâÔ∏è Telegram: <a href='https://t.me/astra_jalyzi30'>–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É</a>\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00\n"
        "üè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    bot.reply_to(
        message,
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp:\n\nhttps://wa.me/79378222906",
        reply_markup=types.InlineKeyboardMarkup([
            [types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://wa.me/79378222906")]
        ])
    )

# === –ö–∞—Ç–∞–ª–æ–≥ ===
@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    text = "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üßµ –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", callback_data="category_–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"))
    markup.add(types.InlineKeyboardButton("ü™ü –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"))
    markup.add(types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"))
    bot.reply_to(message, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    category = call.data.split('_', 1)[1]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()

    if not products:
        bot.send_message(call.message.chat.id, f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", parse_mode='HTML')
        return

    for name, desc, image_url in products:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"),
            types.InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/79378222906")
        )
        try:
            if image_url.startswith("http"):
                bot.send_photo(call.message.chat.id, image_url, caption=f"<b>{name}</b>\n{desc}", parse_mode='HTML', reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, f"<b>{name}</b>\n{desc}", parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

# === –ó–∞–∫–∞–∑ –∑–≤–æ–Ω–∫–∞ ===
@bot.callback_query_handler(func=lambda call: call.data == "request_call")
def request_call_handler(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        reply_markup=types.ReplyKeyboardMarkup(
            row_width=1, resize_keyboard=True, one_time_keyboard=True
        ).add(types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    )
    bot.register_next_step_handler(msg, process_phone_number, call.from_user.first_name)

def process_phone_number(message, user_name):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")
        return

    save_call_request(message.from_user.id, user_name, phone)
    notify_manager(user_name, phone)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}!\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: <code>{phone}</code>\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()
    )

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    init_db()
    add_sample_data()
    threading.Thread(target=send_scheduled_posts, daemon=True).start()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling!")
    bot.polling(none_stop=True, interval=0, timeout=20)
