import os
import threading
import time
import logging
from datetime import datetime

# === –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ ===
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

import sqlite3
from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–ê–ù–ê–õ!
PORT = int(os.getenv("PORT", 10000))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    print("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    print("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def add_sample_data():
    print("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –¢–æ–≤–∞—Ä—ã (–Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∫–∞—Ç–∞–ª–æ–≥ –ø–æ —Å—Å—ã–ª–∫–∞–º ‚Äî –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è", 2490.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/4b6cb7/white?text=–î–µ–Ω—å-–ù–æ—á—å"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–°—Ç–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω", 3290.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/182848/white?text=–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –∂–∞–ª—é–∑–∏", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∂–∞–ª—é–∑–∏ —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞", 1890.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/3a5ca5/white?text=–ê–ª—é–º–∏–Ω–∏–π"),
            ("–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º", 3990.0, "–®—Ç–æ—Ä—ã", "https://placehold.co/300x200/ff6b6b/white?text=–†–∏–º—Å–∫–∏–µ"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –ø–æ–ª–æ—Å–∞–º–∏", 2790.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://placehold.co/300x200/27ae60/white?text=–ó–µ–±—Ä–∞"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞", 4590.0, "–ñ–∞–ª—é–∑–∏", "https://placehold.co/300x200/f39c12/white?text=–î–µ—Ä–µ–≤–æ")
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # SMM –∫–æ–Ω—Ç–µ–Ω—Ç
    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        smm_content = [
            ("5 –ø—Ä–∏—á–∏–Ω –≤—ã–±—Ä–∞—Ç—å —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –û–Ω–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã, –∫—Ä–∞—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã!", "https://placehold.co/600x400/4b6cb7/white?text=–†—É–ª–æ–Ω–Ω—ã–µ+—à—Ç–æ—Ä—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∂–∞–ª—é–∑–∏ –¥–ª—è –∫—É—Ö–Ω–∏", "–ö—É—Ö–Ω—è —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∂–∞–ª—é–∑–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ!", "https://placehold.co/600x400/182848/white?text=–ñ–∞–ª—é–∑–∏+–¥–ª—è+–∫—É—Ö–Ω–∏", "–°–æ–≤–µ—Ç—ã", None, 1),
            ("–¢—Ä–µ–Ω–¥—ã 2023: –ß—Ç–æ –≤ –º–æ–¥–µ —É —à—Ç–æ—Ä", "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–æ–¥–æ–π –∏ –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –≥–ª–∞–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –º–∏—Ä–µ —à—Ç–æ—Ä —ç—Ç–æ–≥–æ –≥–æ–¥–∞.", "https://placehold.co/600x400/ff6b6b/white?text=–¢—Ä–µ–Ω–¥—ã+2023", "–¢—Ä–µ–Ω–¥—ã", None, 1),
            ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –¢–∫–∞–Ω—å vs –ü–í–•", "–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä? –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ –ø–ª—é—Å–∞—Ö –∏ –º–∏–Ω—É—Å–∞—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", "https://placehold.co/600x400/27ae60/white?text=–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", None, 1),
            ("–î–∏–∑–∞–π–Ω —Å–ø–∞–ª—å–Ω–∏ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ —à—Ç–æ—Ä–∞–º–∏", "–°–æ–∑–¥–∞–π—Ç–µ —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å–ø–∞–ª—å–Ω–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —à—Ç–æ—Ä!", "https://placehold.co/600x400/f39c12/white?text=–î–∏–∑–∞–π–Ω+—Å–ø–∞–ª—å–Ω–∏", "–î–∏–∑–∞–π–Ω", None, 1)
        ]
        cursor.executemany("INSERT INTO smm_content (title, content, image_url, category, scheduled_time, is_published) VALUES (?, ?, ?, ?, ?, ?)", smm_content)
        print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–π SMM –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

    conn.commit()
    conn.close()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def save_subscriber(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO subscribers (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    finally:
        conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO messages (user_id, message, is_from_user)
            VALUES (?, ?, ?)
        ''', (user_id, text, is_from_user))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_user(message.from_user)
        save_message(message.from_user.id, message.text, True)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_catalog = types.KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥")
        btn_order = types.KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å")
        btn_channel = types.KeyboardButton("üîó –ö–∞–Ω–∞–ª")
        btn_contacts = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
        btn_whatsapp = types.KeyboardButton("üí¨ WhatsApp")
        btn_help = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")

        markup.add(btn_catalog, btn_order)
        markup.add(btn_channel, btn_contacts)
        markup.add(btn_whatsapp, btn_help)

        bot.reply_to(
            message,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä –∏ –∂–∞–ª—é–∑–∏ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=markup
        )
        print(f"‚úÖ [BOT] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö–∞—Ç–∞–ª–æ–≥' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        products = [
            {
                "name": "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å",
                "desc": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è",
                "price": "2490 ‚ÇΩ",
                "image": "https://placehold.co/300x200/4b6cb7/white?text=–î–µ–Ω—å-–ù–æ—á—å",
                "category": "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"
            },
            {
                "name": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "desc": "–°—Ç–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω",
                "price": "3290 ‚ÇΩ",
                "image": "https://placehold.co/300x200/182848/white?text=–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ",
                "category": "–ñ–∞–ª—é–∑–∏"
            },
            {
                "name": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –∂–∞–ª—é–∑–∏",
                "desc": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∂–∞–ª—é–∑–∏ —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞",
                "price": "1890 ‚ÇΩ",
                "image": "https://placehold.co/300x200/3a5ca5/white?text=–ê–ª—é–º–∏–Ω–∏–π",
                "category": "–ñ–∞–ª—é–∑–∏"
            },
            {
                "name": "–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã",
                "desc": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º",
                "price": "3990 ‚ÇΩ",
                "image": "https://placehold.co/300x200/ff6b6b/white?text=–†–∏–º—Å–∫–∏–µ",
                "category": "–®—Ç–æ—Ä—ã"
            },
            {
                "name": "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞",
                "desc": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞ —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è –ø–æ–ª–æ—Å–∞–º–∏",
                "price": "2790 ‚ÇΩ",
                "image": "https://placehold.co/300x200/27ae60/white?text=–ó–µ–±—Ä–∞",
                "category": "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"
            },
            {
                "name": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "desc": "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞",
                "price": "4590 ‚ÇΩ",
                "image": "https://placehold.co/300x200/f39c12/white?text=–î–µ—Ä–µ–≤–æ",
                "category": "–ñ–∞–ª—é–∑–∏"
            }
        ]

        bot.reply_to(message, "üìã –í–æ—Ç –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")

        for p in products:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{p['name']}"),
                types.InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{p['name']}")
            )
            bot.send_photo(
                chat_id=message.chat.id,
                photo=p["image"],
                caption=f"<b>{p['name']}</b>\n{p['desc']}\nüí∞ {p['price']}",
                parse_mode='HTML',
                reply_markup=markup
            )

        print(f"‚úÖ [BOT] –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ö–∞—Ç–∞–ª–æ–≥': {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
def ask_for_order(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ó–∞–∫–∞–∑–∞—Ç—å' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        bot.reply_to(
            message,
            "üìù –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n\n"
            "1. ‚úèÔ∏è –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ (—à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ –≤ —Å–º)\n"
            "2. üé® –¶–≤–µ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–µ–ª—ã–π –º–∞—Ç–æ–≤—ã–π, –¥—É–± —Å–≤–µ—Ç–ª—ã–π)\n"
            "3. üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)\n\n"
            "–Ø –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂—É —Å—Ç–æ–∏–º–æ—Å—Ç—å!"
        )
        print(f"‚úÖ [BOT] –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ó–∞–∫–∞–∑–∞—Ç—å': {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö–æ–Ω—Ç–∞–∫—Ç—ã' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        bot.reply_to(
            message,
            "üìç *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (927) 822-29-06\n"
            "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
            "üè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5\n\n"
            "üì≤ –¢–∞–∫–∂–µ –ø–∏—à–∏—Ç–µ –≤ WhatsApp: üëá\n"
            "https://wa.me/79278222906",
            parse_mode='Markdown'
        )
        print(f"‚úÖ [BOT] –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ö–æ–Ω—Ç–∞–∫—Ç—ã': {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "üîó –ö–∞–Ω–∞–ª")
def open_channel(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö–∞–Ω–∞–ª' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        bot.reply_to(
            message,
            f"üì¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ü–∏–π –∏ –Ω–æ–≤–∏–Ω–æ–∫:\n\n{CHANNEL_ID}\n\n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ)",
            disable_web_page_preview=False
        )
        print(f"‚úÖ [BOT] –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ö–∞–Ω–∞–ª': {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'WhatsApp' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        whatsapp_url = "https://wa.me/79278222906"
        bot.reply_to(
            message,
            f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ WhatsApp:\n\n{whatsapp_url}\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç!",
            disable_web_page_preview=False
        )
        print(f"‚úÖ [BOT] –°—Å—ã–ª–∫–∞ –Ω–∞ WhatsApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ 'WhatsApp': {e}")
        import traceback
        traceback.print_exc()


@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    try:
        print(f"ü§ñ [BOT] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ü–æ–º–æ—â—å' –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        save_message(message.from_user.id, message.text, True)

        help_text = (
            "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞*:\n\n"
            "‚Ä¢ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ –∏ —Ü–µ–Ω–∞–º–∏\n"
            "‚Ä¢ *–ó–∞–∫–∞–∑–∞—Ç—å* ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–º–µ—Ä –∏ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            "‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã* ‚Äî —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ *–ö–∞–Ω–∞–ª* ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n"
            "‚Ä¢ *WhatsApp* ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
            "üí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é ‚Äî –º—ã –ø–µ—Ä–µ–∑–≤–∞–Ω–∏–≤–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"
        )
        bot.reply_to(message, help_text, parse_mode='Markdown')
        print(f"‚úÖ [BOT] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ü–æ–º–æ—â—å': {e}")
        import traceback
        traceback.print_exc()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–¥–µ—Ç–∞–ª–∏ –∏ –∑–∞–∫–∞–∑) ===
@bot.callback_query_handler(func=lambda call: call.data.startswith('details_') or call.data.startswith('order_'))
def handle_inline_button(call):
    try:
        data = call.data
        product_name = data.split('_', 1)[1]

        if data.startswith('details_'):
            bot.answer_callback_query(call.id, text=f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {product_name}")
            bot.send_message(
                call.message.chat.id,
                f"üìò *{product_name}*\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!",
                parse_mode='Markdown'
            )

        elif data.startswith('order_'):
            bot.answer_callback_query(call.id, text=f"–ó–∞–∫–∞–∑: {product_name}")
            bot.send_message(
                call.message.chat.id,
                f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏: *{product_name}*\n\n"
                "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
                "1. –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ (—à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞ –≤ —Å–º)\n"
                "2. –¶–≤–µ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞\n"
                "3. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                "–Ø –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!",
                parse_mode='Markdown'
            )

    except Exception as e:
        print(f"‚ùå [INLINE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline-–∫–Ω–æ–ø–∫–∏: {e}")
        import traceback
        traceback.print_exc()


# === üî• –ì–õ–ê–í–ù–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ ===
@app.route('/webhook', methods=['POST'])
def webhook():
    print("üì° [WEBHOOK] –ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π POST-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
    try:
        json_str = request.get_data().decode('utf-8')
        print(f"üì° [WEBHOOK] –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {json_str[:200]}...")

        update = telebot.types.Update.de_json(json_str)
        print(f"üì° [WEBHOOK] –û–±—ä–µ–∫—Ç Update —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")

        bot.process_new_updates([update])
        print("üì° [WEBHOOK] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –±–æ—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        return '', 200
    except Exception as e:
        print(f"‚ùå [WEBHOOK] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return 'Error', 500


# === üîç –≠–•–û-–û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
@bot.message_handler(func=lambda message: True)
def debug_echo_handler(message):
    try:
        user_info = f"ID: {message.from_user.id}, –ò–º—è: {message.from_user.first_name}"
        print(f"üì© [ECHO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}: '{message.text}'")
        bot.reply_to(message, "üîß [DEBUG] –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        print("‚úÖ [ECHO] –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        print(f"‚ùå [ECHO] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª ===
def send_scheduled_posts():
    print("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    while True:
        try:
            now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()

            cursor.execute("""
                SELECT id, title, content, image_url, category 
                FROM smm_content 
                WHERE is_published = 0 
                AND scheduled_time <= ?
                ORDER BY scheduled_time
                LIMIT 1
            """, (now,))

            row = cursor.fetchone()
            if row:
                content_id, title, content, image_url, category = row
                message = f"""
üìå <b>{title}</b>

{content}

#{category.replace(' ', '_')}
                """
                try:
                    if image_url and "placeholder" not in image_url.lower():
                        bot.send_photo(CHANNEL_ID, image_url.strip(), caption=message, parse_mode='HTML')
                    else:
                        bot.send_message(CHANNEL_ID, message, parse_mode='HTML')
                    cursor.execute("UPDATE smm_content SET is_published = 1 WHERE id = ?", (content_id,))
                    conn.commit()
                    print(f"‚úÖ [AUTOPOST] –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
                except Exception as e:
                    print(f"‚ùå [AUTOPOST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}")
            conn.close()
        except Exception as e:
            print(f"‚ùå [AUTOPOST] –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        time.sleep(60)

def start_autoposting():
    thread = threading.Thread(target=send_scheduled_posts, daemon=True)
    thread.start()
    print("üßµ [AUTOPOST] –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫")


# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ health-check) ===
@app.route('/')
def home():
    return jsonify({
        "status": "running",
        "service": "BlindStyle SMM Bot Service",
        "version": "1.3",
        "message": "Bot is online. Webhook is set to /webhook"
    }), 200


# === HEAD / –¥–ª—è Gunicorn ===
@app.route('/', methods=['HEAD'])
def head():
    return '', 200


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
def set_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', 'telegram-blinds-bot-1.onrender.com')}/webhook"
    print(f"üîß [WEBHOOK] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_url}")

    try:
        result_remove = bot.remove_webhook()
        print(f"üóë [WEBHOOK] –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω: {result_remove}")

        time.sleep(1)

        result_set = bot.set_webhook(url=webhook_url)
        if result_set:
            print(f"‚úÖ [WEBHOOK] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            print(f"‚ùå [WEBHOOK] –û—à–∏–±–∫–∞: –º–µ—Ç–æ–¥ set_webhook –≤–µ—Ä–Ω—É–ª False –¥–ª—è URL: {webhook_url}")
    except Exception as e:
        print(f"‚ùå [WEBHOOK] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        import traceback
        traceback.print_exc()


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
def initialize():
    print("üîÑ [INIT] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    init_db()
    add_sample_data()
    set_webhook()
    start_autoposting()
    print("‚úÖ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# üî•üî•üî• –í–ê–ñ–ù–ï–ô–®–ê–Ø –ß–ê–°–¢–¨ ‚Äî –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ò–ú–ü–û–†–¢–ï
initialize()

# === –ó–∞–ø—É—Å–∫ (Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Gunicorn, —ç—Ç–æ—Ç –±–ª–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è) ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
