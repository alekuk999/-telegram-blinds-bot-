import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib
import random
import requests
import json
import re

# === –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ ===
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@astra_jaluzi")
PORT = int(os.getenv("PORT", 8000))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ø–Ω–¥–µ–∫—Å GPT ===
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"

# === –í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
MANAGER_CHAT_ID = 7126605143

# === –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
_INITIALIZED = False

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    print("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            weekday INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    print("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –ø—É—Å—Ç–æ) ===
def add_sample_data():
    print("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            (
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å",
                "‚ú® *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π!*\n\n"
                "‚Ä¢ *–§—É–Ω–∫—Ü–∏—è*: –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –ø–ª–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –±–µ–∑ –ø–æ–¥—ä—ë–º–∞ —à—Ç–æ—Ä—ã.\n"
                "‚Ä¢ *–ú–∞—Ç–µ—Ä–∏–∞–ª*: –ü–æ–ª–∏—ç—Å—Ç–µ—Ä —Å –ø—Ä–æ–ø–∏—Ç–∫–æ–π ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –Ω–µ –≤–ø–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Ö–∏.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ë–µ–ª—ã–π, –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä—ã–π, –≥—Ä–∞—Ñ–∏—Ç.\n"
                "‚Ä¢ *–†–∞–∑–º–µ—Ä—ã*: –ü–æ–¥ –∑–∞–∫–∞–∑ ‚Äî –æ—Ç 40 —Å–º –¥–æ 300 —Å–º –≤ —à–∏—Ä–∏–Ω—É.",
                0.0,
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã",
                "https://img.freepik.com/free-photo/modern-living-room-interior-design_1268-16720.jpg"
            ),
            (
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –±–ª—ç–∫–∞—É—Ç",
                "üåô *–ü–æ–ª–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–Ω–∞!*\n\n"
                "‚Ä¢ *–§—É–Ω–∫—Ü–∏—è*: 100% –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏, –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.\n"
                "‚Ä¢ *–ú–∞—Ç–µ—Ä–∏–∞–ª*: –¢—Ä—ë—Ö—Å–ª–æ–π–Ω–∞—è —Ç–∫–∞–Ω—å —Å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–ø–ª–æ –∏ —Å–≤–µ—Ç.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ß—ë—Ä–Ω—ã–π, —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π, —à–æ–∫–æ–ª–∞–¥, –±–æ—Ä–¥–æ.\n"
                "‚Ä¢ *–ú–æ–Ω—Ç–∞–∂*: –í–Ω—É—Ç—Ä–∏ –∏–ª–∏ —Å–Ω–∞—Ä—É–∂–∏ –æ–∫–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—ë–º–∞.",
                0.0,
                "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã",
                "https://img.freepik.com/free-photo/blackout-curtains-bedroom_1268-17832.jpg"
            ),
            (
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ",
                "üîß *–ö–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º!*\n\n"
                "‚Ä¢ *–ú–∞—Ç–µ—Ä–∏–∞–ª*: –ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –ª–∞–º–µ–ª–∏ 25 –º–º ‚Äî –ª—ë–≥–∫–∏–µ, –ø—Ä–æ—á–Ω—ã–µ, –Ω–µ —Ä–∂–∞–≤–µ—é—Ç.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ë–µ–ª—ã–π, —Å–µ—Ä–µ–±—Ä–æ, –∑–æ–ª–æ—Ç–æ, –¥–µ—Ä–µ–≤–æ, –º–µ—Ç–∞–ª–ª–∏–∫ ‚Äî –±–æ–ª–µ–µ 20 –æ—Ç—Ç–µ–Ω–∫–æ–≤.\n"
                "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –ü–æ–≤–æ—Ä–æ—Ç –ª–∞–º–µ–ª–µ–π –Ω–∞ 180¬∞ ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.\n"
                "‚Ä¢ *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ*: –ö—É—Ö–Ω—è, –≤–∞–Ω–Ω–∞—è, –±–∞–ª–∫–æ–Ω ‚Äî –Ω–µ –±–æ—è—Ç—Å—è –≤–ª–∞–≥–∏ –∏ –ø–∞—Ä–∞.",
                0.0,
                "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "https://img.freepik.com/free-photo/vertical-blinds-window_1268-17953.jpg"
            ),
            (
                "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ",
                "üåø *–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É—é—Ç –≤ –≤–∞—à–µ–º –¥–æ–º–µ!*\n\n"
                "‚Ä¢ *–¢–∫–∞–Ω—å*: –ü–ª–æ—Ç–Ω—ã–π –ø–æ–ª–∏—ç—Å—Ç–µ—Ä ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –Ω–µ –≤–ø–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∞—Ö–∏, –ø–æ–≥–ª–æ—â–∞–µ—Ç —à—É–º.\n"
                "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∏ —Å–¥–≤–∏–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –ª–µ–≥–∫–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ.\n"
                "‚Ä¢ *–¶–≤–µ—Ç–∞*: –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞ ‚Äî –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä—ã–π, –º–æ–ª–æ—á–Ω—ã–π, –ª–∞–≤–∞–Ω–¥–∞.\n"
                "‚Ä¢ *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ*: –ì–æ—Å—Ç–∏–Ω–∞—è, —Å–ø–∞–ª—å–Ω—è, –æ—Ñ–∏—Å ‚Äî —Å–æ–∑–¥–∞—é—Ç –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—Ä–∞.",
                0.0,
                "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏",
                "https://img.freepik.com/free-photo/vertical-blinds-living-room_1268-18021.jpg"
            )
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        print("‚ÑπÔ∏è [DB] –¢–∞–±–ª–∏—Ü–∞ smm_content –ø—É—Å—Ç–∞ ‚Äî –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å GPT.")

    conn.commit()
    conn.close()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO messages (user_id, message, is_from_user)
            VALUES (?, ?, ?)
        ''', (user_id, text, is_from_user))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# === –ó–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å GPT ===
def query_yandex_gpt(user_question):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}"
    }

    system_prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∂–∞–ª—é–∑–∏ –∏ —Ä—É–ª–æ–Ω–Ω—ã–º —à—Ç–æ—Ä–∞–º –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ (–∂–∞–ª—é–∑–∏, —à—Ç–æ—Ä—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –º–æ–Ω—Ç–∞–∂, —Ü–µ–Ω—ã –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏), –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏, "
        "—á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –æ–∫–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )

    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 500
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": user_question}
        ]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=20)
        response.raise_for_status()
        result = response.json()
        answer = result['result']['alternatives'][0]['message']['text']
        return answer.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        return None

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        save_user(message.from_user)
        save_message(message.from_user.id, message.text, True)
        show_main_menu(message)
    except Exception as e:
        print(f"‚ùå [BOT] –û—à–∏–±–∫–∞ –≤ /start: {e}")

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_catalog = types.KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥")
    btn_order = types.KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    btn_channel = types.KeyboardButton("üîó –ö–∞–Ω–∞–ª")
    btn_contacts = types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    btn_whatsapp = types.KeyboardButton("üí¨ WhatsApp")
    btn_help = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    btn_manager = types.KeyboardButton("üë®‚Äçüíº –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

    markup.add(btn_catalog, btn_order)
    markup.add(btn_channel, btn_contacts)
    markup.add(btn_whatsapp, btn_help)
    markup.add(btn_manager)

    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# === üé® –ö–∞—Ç–∞–ª–æ–≥ ===
@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    try:
        save_message(message.from_user.id, message.text, True)
        text = "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*"

        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_roller = types.InlineKeyboardButton("üßµ –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", callback_data="category_–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã")
        btn_horizontal = types.InlineKeyboardButton("ü™ü –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏")
        btn_vertical = types.InlineKeyboardButton("üö™ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏")
        btn_whatsapp = types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url="https://wa.me/79378222906")
        btn_call = types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call")

        markup.add(btn_roller, btn_horizontal, btn_vertical)
        markup.add(btn_whatsapp, btn_call)

        bot.reply_to(message, text, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        print(f"‚ùå [CATALOG] –û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    try:
        category = call.data.split('_', 1)[1]
        bot.answer_callback_query(call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category}")

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT name, description, image_url 
            FROM products 
            WHERE category = ? AND image_url IS NOT NULL AND image_url != ''
        """, (category,))
        products = cursor.fetchall()
        conn.close()

        if not products:
            bot.send_message(call.message.chat.id, f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}* –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", parse_mode='Markdown')
            return

        bot.send_message(call.message.chat.id, f"üìã *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}*", parse_mode='Markdown')

        for product in products:
            name, desc, image_url = product
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"),
                types.InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/79378222906")
            )

            if image_url.startswith("http"):
                bot.send_photo(
                    chat_id=call.message.chat.id,
                    photo=image_url,
                    caption=f"<b>{name}</b>\n{desc}",
                    parse_mode='HTML',
                    reply_markup=markup
                )
            else:
                bot.send_message(call.message.chat.id, f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {name}")

        show_main_menu(call.message)
    except Exception as e:
        print(f"‚ùå [CATEGORY] –û—à–∏–±–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ ===
@bot.callback_query_handler(func=lambda call: call.data == "request_call")
def request_call_handler(call):
    try:
        bot.answer_callback_query(call.id)
        msg = bot.send_message(
            call.message.chat.id,
            "üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*, –∏ –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
            parse_mode='Markdown',
            reply_markup=types.ReplyKeyboardMarkup(
                row_width=1,
                resize_keyboard=True,
                one_time_keyboard=True
            ).add(
                types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
            )
        )
        bot.register_next_step_handler(msg, process_phone_number, call.from_user.first_name)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ request_call_handler: {e}")

def process_phone_number(message, user_name):
    try:
        phone = message.contact.phone_number if message.contact else message.text.strip()
        if not phone:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO orders (user_id, user_name, phone, status)
            VALUES (?, ?, ?, ?)
        ''', (message.from_user.id, user_name, phone, "pending"))
        conn.commit()
        conn.close()

        try:
            bot.send_message(
                MANAGER_CHAT_ID,
                f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!*\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`",
                parse_mode='Markdown'
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

        bot.send_message(
            message.chat.id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}!\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: `{phone}`\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
            parse_mode='Markdown',
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_phone_number: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === üë®‚Äçüíº –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ===
@bot.message_handler(func=lambda m: m.text == "üë®‚Äçüíº –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
def start_manager_or_ai_chat(message):
    save_message(message.from_user.id, message.text, True)
    bot.send_message(
        message.chat.id,
        "üí¨ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "*¬´–•–æ—á—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞¬ª*, *¬´–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ¬ª* –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
        parse_mode='Markdown'
    )
    bot.register_next_step_handler(message, handle_ai_or_forward_to_manager)

def handle_ai_or_forward_to_manager(message):
    user_text = message.text.strip()
    trigger_phrases = ["–º–µ–Ω–µ–¥–∂–µ—Ä", "—á–µ–ª–æ–≤–µ–∫", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ", "–ø–æ–∑–≤–æ–Ω–∏—Ç–µ", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—Ö–æ—á—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", "—Å–≤—è–∂–∏—Ç–µ—Å—å", "–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å", "–º–µ–Ω–µ–¥–∂–µ—Ä—É"]
    
    if any(phrase in user_text.lower() for phrase in trigger_phrases):
        forward_to_manager(message)
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI
    save_message(message.from_user.id, user_text, True)
    bot.send_chat_action(message.chat.id, 'typing')
    ai_answer = query_yandex_gpt(user_text)

    if ai_answer:
        save_message(message.from_user.id, ai_answer, False)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîÑ –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å"))
        markup.add(types.KeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(message.chat.id, ai_answer, reply_markup=markup)
        bot.register_next_step_handler(message, continue_ai_or_manager_flow)
    else:
        # –ï—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å—Ä–∞–∑—É –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        bot.send_message(message.chat.id, "üß† AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
        forward_to_manager(message)

def continue_ai_or_manager_flow(message):
    if message.text == "üîÑ –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å":
        bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, handle_ai_or_forward_to_manager)
    elif message.text == "üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        bot.send_message(message.chat.id, "üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, forward_to_manager)
    elif message.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        show_main_menu(message)
    else:
        handle_ai_or_forward_to_manager(message)

def forward_to_manager(message):
    manager_prompt = (
        "üí¨ *–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!*\n\n"
        "üìå *–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å:*\n"
        "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å: ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!¬ª\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ: *—Ç–∏–ø –∏–∑–¥–µ–ª–∏—è, —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞, –∞–¥—Ä–µ—Å, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è*\n"
        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–∏—Ç–µ: *¬´–ó–∞–º–µ—Ä ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!¬ª*\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ: *—Å–∫–∏–¥–∫—É 5% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏*\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp –¥–ª—è —Å–≤—è–∑–∏\n\n"
        "üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏ –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏\n"
        "üìç *–ê–¥—Ä–µ—Å:* –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5\n"
        "üìû *WhatsApp / Telegram:* https://wa.me/79378222906 | https://t.me/astra_jalyzi30\n"
        "üïí *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:* –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 19:00\n\n"
        "üîî *–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:*"
    )

    try:
        bot.send_message(
            MANAGER_CHAT_ID,
            f"{manager_prompt}\n"
            f"üë§ –ò–º—è: {message.from_user.full_name}\n"
            f"üÜî ID: `{message.from_user.id}`\n"
            f"üì± @{message.from_user.username or '‚Äî'}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: _{message.text}_",
            parse_mode='Markdown'
        )
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n\n"
            "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìö *–ö–∞—Ç–∞–ª–æ–≥*\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ üí¨ [WhatsApp](https://wa.me/79378222906)",
            parse_mode='Markdown'
        )
        show_main_menu(message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é:\n"
            "[WhatsApp](https://wa.me/79378222906) –∏–ª–∏ [Telegram](https://t.me/astra_jalyzi30)",
            parse_mode='Markdown'
        )
        show_main_menu(message)

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ===
@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    bot.reply_to(
        message,
        "üìç *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (937) 822-29-06\n"
        "üí¨ WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å](https://wa.me/79378222906)\n"
        "‚úâÔ∏è Telegram: [–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É](https://t.me/astra_jalyzi30)\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
        "üè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    bot.reply_to(
        message,
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ WhatsApp:\n\nhttps://wa.me/79378222906",
        reply_markup=types.InlineKeyboardMarkup([
            [types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://wa.me/79378222906")]
        ])
    )

@bot.message_handler(func=lambda m: m.text == "üîó –ö–∞–Ω–∞–ª")
def open_channel(message):
    bot.reply_to(message, f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n{CHANNEL_ID}")

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    bot.reply_to(
        message,
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞*:\n\n"
        "‚Ä¢ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ *–ó–∞–∫–∞–∑–∞—Ç—å* ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã* ‚Äî —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ *–ö–∞–Ω–∞–ª* ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ *WhatsApp* ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
        "‚Ä¢ *–°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞* ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "üí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é!"
    )

# === üî• –í–µ–±—Ö—É–∫ ===
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return '', 200
    except Exception as e:
        print(f"‚ùå [WEBHOOK] –û—à–∏–±–∫–∞: {e}")
        return 'Error', 500

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
def generate_post_with_yandex_gpt(product_name, product_description):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        print("‚ùå YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, None

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}"
    }
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏ –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏¬ª.
–°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.

–¢–æ–≤–∞—Ä: {product_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
- –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏)
- 3 —Ö—ç—à—Ç–µ–≥–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ #–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, #–ñ–∞–ª—é–∑–∏–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å –∏ –æ–¥–∏–Ω –ø–æ —Ç–µ–º–µ
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: "–ù–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp –∏–ª–∏ Telegram!"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫",
    "content": "—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",
    "hashtags": ["#—Ö—ç—à—Ç–µ–≥1", "#—Ö—ç—à—Ç–µ–≥2", "#—Ö—ç—à—Ç–µ–≥3"]
}}
"""

    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [{"role": "user", "text": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']

        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            post_data = json.loads(json_match.group())
            full_content = f"{post_data['content']}\n\n{' '.join(post_data['hashtags'])}"
            return post_data['title'], full_content
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {e}")
        return None, None

def auto_generate_and_publish_post():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products ORDER BY RANDOM() LIMIT 1")
    product = cursor.fetchone()
    conn.close()

    if not product:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
        return

    name, desc, image_url = product
    title, content = generate_post_with_yandex_gpt(name, desc)

    if not title or not content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return

    try:
        caption = f"üìå *{title}*\n\n{content}"
        if image_url.startswith("http"):
            bot.send_photo(CHANNEL_ID, image_url, caption=caption, parse_mode='Markdown')
        else:
            bot.send_message(CHANNEL_ID, caption, parse_mode='Markdown')
        print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def send_scheduled_posts():
    print("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    last_auto_post_day = None
    while True:
        try:
            now = datetime.now()
            if now.hour == 10 and now.minute == 0:
                today = now.date()
                if last_auto_post_day != today:
                    auto_generate_and_publish_post()
                    last_auto_post_day = today
            time.sleep(60)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
            time.sleep(60)

def start_autoposting():
    thread = threading.Thread(target=send_scheduled_posts, daemon=True)
    thread.start()
    print("üßµ [AUTOPOST] –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫")

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.route('/')
def home():
    global _INITIALIZED
    if not _INITIALIZED:
        init_db()
        add_sample_data()
        set_webhook()
        start_autoposting()
        _INITIALIZED = True
    return jsonify({"status": "running", "version": "5.2"}), 200

@app.route('/', methods=['HEAD'])
def head():
    return '', 200

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
def set_webhook():
    hostname = "alekuk999-telegram-blinds-bot--f681.twc1.net"
    webhook_url = f"https://{hostname}/webhook"
    print(f"üîß [WEBHOOK] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
    try:
        result = bot.set_webhook(url=webhook_url)
        if result:
            print("‚úÖ [WEBHOOK] –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå [WEBHOOK] set_webhook –≤–µ—Ä–Ω—É–ª False")
    except Exception as e:
        print(f"‚ùå [WEBHOOK] –û—à–∏–±–∫–∞: {e}")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
