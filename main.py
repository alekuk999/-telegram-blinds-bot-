# main.py
import os
import logging
from flask import Flask, request
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    JobQueue
)
import asyncio
from datetime import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === üîë –¢–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

try:
    CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
except (TypeError, ValueError):
    logger.critical("‚ùå CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    exit(1)

# === üåê –ü–æ—Ä—Ç –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
PORT = int(os.getenv("PORT", 8080))
app = Flask(__name__)

# === üì∏ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ ===
POSTS = [
    {
        "photo": "https://i.ibb.co/6YpZ1fL/roller-blinds.jpg",
        "caption": "‚ú® –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ\n‚Äî –¢–∫–∞–Ω—å: –±–ª—ç–∫–∞—É—Ç\n‚Äî –£—Å—Ç–∞–Ω–æ–≤–∫–∞: 1 —á–∞—Å\n‚Äî –¶–µ–Ω–∞: –æ—Ç 2990 ‚ÇΩ\n–ó–∞–∫–∞–∑: @manager"
    },
    {
        "photo": "https://i.ibb.co/8XK0z1q/vertical-blinds.jpg",
        "caption": "üî• –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω\n‚Äî –¶–≤–µ—Ç: —Å–µ—Ä—ã–π\n‚Äî –¶–µ–Ω–∞: –æ—Ç 3500 ‚ÇΩ\n@manager"
    },
    {
        "photo": "https://i.ibb.co/0jT0fZk/roman-shades.jpg",
        "caption": "üí´ –†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã ‚Äî —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É—é—Ç\n‚Äî –ú–∞—Ç–µ—Ä–∏–∞–ª: –ª—ë–Ω\n‚Äî –¶–µ–Ω–∞: –æ—Ç 4200 ‚ÇΩ\n@manager"
    }
]

TIPS = [
    "üí° <b>–°–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–ª—ç–∫–∞—É—Ç-—Ç–∫–∞–Ω—å?\n‚Äî –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –æ—Ç 300 –≥/–º¬≤",
    "üî• <b>–õ–∞–π—Ñ—Ö–∞–∫:</b>\n–ß–∏—Å—Ç–∏—Ç–µ –∂–∞–ª—é–∑–∏ –≤–ª–∞–∂–Ω–æ–π –≥—É–±–∫–æ–π —Å –∫–∞–ø–ª–µ–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ—Å—É–¥—ã"
]

PROMOS = [
    "üéâ <b>–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏!</b>\n–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏!\n–¢–æ–ª—å–∫–æ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è."
]

# === üïê –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É—Ç—Ä–æ–º –∏ –¥–Ω—ë–º ===
async def daily_morning(context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(TIPS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        logger.info("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —Å–æ–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç—Ä–æ–º: {e}")

async def daily_afternoon(context: ContextTypes.DEFAULT_TYPE):
    post = random.choice(POSTS)
    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=post["photo"],
            caption=post["caption"]
        )
        logger.info("üå§Ô∏è –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–Ω—ë–º: {e}")

# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def setup_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    job_queue = application.job_queue

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    job_queue.run_daily(daily_morning, time(hour=10, minute=0))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    job_queue.run_daily(daily_afternoon, time(hour=15, minute=0)) # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 15:00

    # –ó–∞–ø—É—Å–∫–∞–µ–º job_queue
    job_queue.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}.onrender.com/webhook/{BOT_TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    return application

# === ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ===
@app.route('/webhook/<string:token>', methods=['POST'])
def webhook(token):
    if token != BOT_TOKEN:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        return 'Unauthorized', 401

    if not request.is_json:
        logger.warning("‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –∑–∞–ø—Ä–æ—Å")
        return 'Bad Request', 400

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        app = asyncio.run(setup_bot())
        update = Update.de_json(request.get_json(), app.bot)
        asyncio.run(app.process_update(update))
        return 'OK', 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 'Internal Server Error', 500

# === üè† Health check ===
@app.route('/')
def health():
    return '<h1>‚úÖ SMM Bot is Running</h1>', 200

# === üî• –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=PORT)
