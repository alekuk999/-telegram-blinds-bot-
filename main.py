# main.py
import os
import asyncio
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
if not CHANNEL_ID:
    raise ValueError("‚ùå CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
logger.info(f"BOT_TOKEN: {'‚úÖ –∑–∞–¥–∞–Ω' if BOT_TOKEN else '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}")
logger.info(f"CHANNEL_ID: {'‚úÖ –∑–∞–¥–∞–Ω' if CHANNEL_ID else '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}")
logger.info(f"YANDEX_API_KEY: {'‚úÖ –∑–∞–¥–∞–Ω' if YANDEX_API_KEY else '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}")
logger.info(f"FOLDER_ID: {'‚úÖ –∑–∞–¥–∞–Ω' if FOLDER_ID else '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}")

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∂–∞–ª—é–∑–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/tip /promo /work /gpt [—Ç–µ–º–∞]")

# === –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ===
async def run_bot():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    logger.info("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling!")
    await app.start()
    await app.updater.start_polling()
    await app.idle()

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Timeweb ===
def run_http_se
