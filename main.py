import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib
import random
import requests
import re

# === –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ ===
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@astra_jaluzi")
PORT = int(os.getenv("PORT", 8000))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Yandex Cloud ===
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"

# === –í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
MANAGER_CHAT_ID = 7126605143

# === –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
_INITIALIZED = False

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    print("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            category TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            user_name TEXT,
            phone TEXT,
            status TEXT DEFAULT 'pending'
        )
    ''')

    conn.commit()
    conn.close()
    print("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def add_sample_data():
    print("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –ø–ª–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å ‚Äî —Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ç –±–µ–∑ –ø–æ–¥—ä—ë–º–∞ —à—Ç–æ—Ä—ã.", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –±–ª—ç–∫–∞—É—Ç", "100% –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.", "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –ª–∞–º–µ–ª–∏ 25 –º–º ‚Äî –ª—ë–≥–∫–∏–µ, –ø—Ä–æ—á–Ω—ã–µ, –Ω–µ —Ä–∂–∞–≤–µ—é—Ç.", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ", "–ü–ª–æ—Ç–Ω—ã–π –ø–æ–ª–∏—ç—Å—Ç–µ—Ä ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞–µ—Ç, –ø–æ–≥–ª–æ—â–∞–µ—Ç —à—É–º, —Å–æ–∑–¥–∞—ë—Ç —É—é—Ç.", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"),
            ("–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ", "–ì–∞—Ä–º–æ—à–∫–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –º–∞–Ω—Å–∞—Ä–¥, —ç—Ä–∫–µ—Ä–æ–≤ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–∫–æ–Ω.", "–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞ ‚Äî –¥—É–±, –æ—Ä–µ—Ö. –°–ª—É–∂–∞—Ç 15+ –ª–µ—Ç.", "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏")
        ]
        cursor.executemany("INSERT INTO products (name, description, category) VALUES (?, ?, ?)", products)
        print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    conn.commit()
    conn.close()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def save_call_request(user_id, first_name, phone_number):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, user_name, phone, status)
        VALUES (?, ?, ?, ?)
    ''', (user_id, first_name, phone_number, "pending"))
    conn.commit()
    conn.close()

def notify_manager(user_name, phone_number):
    try:
        bot.send_message(
            MANAGER_CHAT_ID,
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!*\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`",
            parse_mode='Markdown'
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

# === Yandex ART: –ø–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ operation_id ===
def get_image_url_from_operation(operation_id):
    url = f"https://llm.api.cloud.yandex.net/operations/{operation_id}"
    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
    for _ in range(12):  # –∂–¥—ë–º –¥–æ 60 —Å–µ–∫
        time.sleep(5)
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                result = response.json()
                if result.get("done") and "response" in result:
                    return result["response"]["uri"]
        except:
            break
    return None

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def generate_post_and_image(product_name, product_description):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        print("‚ùå YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, None, None

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT
    gpt_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {"Content-Type": "application/json", "Authorization": f"Api-Key {YANDEX_API_KEY}"}
    gpt_prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏ –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏¬ª.
–°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–¢–æ–≤–∞—Ä: {product_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚â§ 50 —Å–∏–º–≤–æ–ª–æ–≤
- –¢–µ–∫—Å—Ç ‚â§ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏
- –•—ç—à—Ç–µ–≥–∏: #–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å #–ñ–∞–ª—é–∑–∏–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å –∏ –æ–¥–∏–Ω –ø–æ —Ç–µ–º–µ
- –ü—Ä–∏–∑—ã–≤: "–ù–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp –∏–ª–∏ Telegram!"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON:
{{
    "title": "...",
    "content": "...",
    "hashtags": ["...", "...", "..."]
}}
"""

    try:
        gpt_data = {
            "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
            "completionOptions": {"stream": False, "temperature": 0.7, "maxTokens": 800},
            "messages": [{"role": "user", "text": gpt_prompt}]
        }
        gpt_resp = requests.post(gpt_url, headers=headers, json=gpt_data, timeout=30)
        gpt_resp.raise_for_status()
        text = gpt_resp.json()['result']['alternatives'][0]['message']['text']

        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            post = json.loads(json_match.group())
            full_content = f"{post['content']}\n\n{' '.join(post['hashtags'])}"
            title = post['title']
        else:
            return None, None, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        return None, None, None

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex ART
    art_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
    art_prompt = f"{product_name} –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–µ—Ç, –±–µ–∑ –ª—é–¥–µ–π."
    art_data = {
        "modelUri": f"art://{YANDEX_FOLDER_ID}/yandex-art-2.0/latest",
        "messages": [{"text": art_prompt, "weight": "1"}],
        "generationOptions": {"mimeType": "image/jpeg"}
    }

    try:
        art_resp = requests.post(art_url, headers=headers, json=art_data, timeout=30)
        art_resp.raise_for_status()
        op_id = art_resp.json()["id"]
        image_url = get_image_url_from_operation(op_id)
        return title, full_content, image_url
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ART: {e}")
        return title, full_content, None

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
def auto_generate_and_publish_post():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description FROM products ORDER BY RANDOM() LIMIT 1")
    product = cursor.fetchone()
    conn.close()

    if not product:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return

    name, desc = product
    title, content, image_url = generate_post_and_image(name, desc)

    if not title or not content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return

    try:
        caption = f"üìå *{title}*\n\n{content}"
        if image_url:
            bot.send_photo(CHANNEL_ID, image_url, caption=caption, parse_mode='Markdown')
            print(f"‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
        else:
            bot.send_message(CHANNEL_ID, caption, parse_mode='Markdown')
            print(f"‚úÖ –ü–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def send_scheduled_posts():
    print("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    last_day = None
    while True:
        now = datetime.now()
        if now.hour == 10 and now.minute == 0:
            today = now.date()
            if last_day != today:
                auto_generate_and_publish_post()
                last_day = today
        time.sleep(60)

def start_autoposting():
    thread = threading.Thread(target=send_scheduled_posts, daemon=True)
    thread.start()
    print("üßµ [AUTOPOST] –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìö –ö–∞—Ç–∞–ª–æ–≥", "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üîó –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("üí¨ WhatsApp", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    bot.reply_to(message, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    bot.reply_to(
        message,
        "üìç *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (937) 822-29-06\n"
        "üí¨ WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å](https://wa.me/79378222906)\n"
        "‚úâÔ∏è Telegram: [–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É](https://t.me/astra_jalyzi30)\n"
        "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00\n"
        "üè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    bot.reply_to(
        message,
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ WhatsApp:\n\nhttps://wa.me/79378222906",
        reply_markup=types.InlineKeyboardMarkup([
            [types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://wa.me/79378222906")]
        ])
    )

@bot.message_handler(func=lambda m: m.text == "üîó –ö–∞–Ω–∞–ª")
def open_channel(message):
    bot.reply_to(message, f"üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n\n{CHANNEL_ID}")

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    bot.reply_to(
        message,
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞*:\n\n"
        "‚Ä¢ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ *–ó–∞–∫–∞–∑–∞—Ç—å* ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã* ‚Äî —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "‚Ä¢ *–ö–∞–Ω–∞–ª* ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏–∏\n"
        "‚Ä¢ *WhatsApp* ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
        "üí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é!"
    )

@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    text = "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"))
    markup.add(types.InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/79378222906"))
    bot.reply_to(message, text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "request_call")
def request_call_handler(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        reply_markup=types.ReplyKeyboardMarkup(
            row_width=1, resize_keyboard=True, one_time_keyboard=True
        ).add(types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    )
    bot.register_next_step_handler(msg, process_phone_number, call.from_user.first_name)

def process_phone_number(message, user_name):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")
        return

    save_call_request(message.from_user.id, user_name, phone)
    notify_manager(user_name, phone)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}!\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: `{phone}`\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardRemove()
    )

# === Webhook ===
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return '', 200
    except Exception as e:
        print(f"‚ùå [WEBHOOK] –û—à–∏–±–∫–∞: {e}")
        return 'Error', 500

@app.route('/')
def home():
    global _INITIALIZED
    if not _INITIALIZED:
        init_db()
        add_sample_data()
        set_webhook()
        start_autoposting()
        _INITIALIZED = True
    return jsonify({"status": "running"}), 200

def set_webhook():
    hostname = "alekuk999-telegram-blinds-bot--f681.twc1.net"
    webhook_url = f"https://{hostname}/webhook"
    print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
    try:
        bot.set_webhook(url=webhook_url)
        print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
