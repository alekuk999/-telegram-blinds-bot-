import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib

# === –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ ===
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

CHANNEL_ID = "@astra_jaluzi"
PORT = 8000

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"

# === –í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
MANAGER_CHAT_ID = 7126605143

# === –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
_INITIALIZED = False

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    print("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    print("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def add_sample_data():
    print("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "‚ú® *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π!*...", 0.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "images/rulonnye_den_noch.jpg"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∑–µ–±—Ä–∞", "üé® *–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑–µ–±—Ä—ã!*...", 0.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "images/rulonnye_zebra.jpg"),
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –±–ª—ç–∫–∞—É—Ç", "üåô *–ü–æ–ª–Ω–æ–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–Ω–∞!*...", 0.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "images/rulonnye_blackout.jpg"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "üîß *–ö–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º!*...", 0.0, "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/gorizontalnye_aluminievye.jpg"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ", "ü™µ *–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å!*...", 0.0, "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/gorizontalnye_derevyannye.jpg"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ", "üåø *–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —É—é—Ç –≤ –≤–∞—à–µ–º –¥–æ–º–µ!*...", 0.0, "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/vertikalnye_tkanevye.jpg"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ü–í–•", "üíß *–ü—Ä–∞–∫—Ç–∏—á–Ω–æ –∏ –±—é–¥–∂–µ—Ç–Ω–æ!*...", 0.0, "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/vertikalnye_pvh.jpg"),
            ("–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ —Ç–∫–∞–Ω–µ–≤—ã–µ", "üé® *–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–∫–æ–Ω!*...", 0.0, "–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ", "images/plisse_tkanevye.jpg"),
            ("–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "ü™ü *–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ!*...", 0.0, "–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ", "images/plisse_aluminievye.jpg"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –¥—É–±", "üå≥ *–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —Ä–æ—Å–∫–æ—à—å –∏ —Å—Ç–∞—Ç—É—Å!*...", 0.0, "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/derevyannye_dub.jpg"),
            ("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏ –æ—Ä–µ—Ö", "üå∞ *–¢—ë–ø–ª—ã–π –∏ —É—é—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä!*...", 0.0, "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", "images/derevyannye_orekh.jpg")
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        print("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    conn.commit()
    conn.close()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)', (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO messages (user_id, message, is_from_user) VALUES (?, ?, ?)', (user_id, text, is_from_user))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.from_user)
    save_message(message.from_user.id, message.text, True)
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìö –ö–∞—Ç–∞–ª–æ–≥", "üßµ –¢–∫–∞–Ω–∏")
    markup.add("üîó –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("üí¨ WhatsApp", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# === –ö–∞—Ç–∞–ª–æ–≥ ===
@bot.message_handler(func=lambda m: m.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    save_message(message.from_user.id, message.text, True)
    text = "‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*"
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üßµ –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", callback_data="category_–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã"))
    markup.add(types.InlineKeyboardButton("ü™ü –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"))
    markup.add(types.InlineKeyboardButton("üö™ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏"))
    markup.add(types.InlineKeyboardButton("üåÄ –ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ", callback_data="category_–ñ–∞–ª—é–∑–∏ –ø–ª–∏—Å—Å–µ"))
    markup.add(types.InlineKeyboardButton("ü™µ –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏", callback_data="category_–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∂–∞–ª—é–∑–∏"))
    markup.add(types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url="https://wa.me/79378222906"))
    markup.add(types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="request_call"))
    bot.reply_to(message, text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_selection(call):
    category = call.data.split('_', 1)[1]
    bot.answer_callback_query(call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()
    if not products:
        bot.send_message(call.message.chat.id, f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}* –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", parse_mode='Markdown')
        return
    bot.send_message(call.message.chat.id, f"üìã *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}*", parse_mode='Markdown')
    for product in products:
        name, desc, image_url = product
        product_key = hashlib.md5(name.encode()).hexdigest()[:8]
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{product_key}"),
            types.InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product_key}")
        )
        try:
            with open(image_url, 'rb') as photo_file:
                bot.send_photo(call.message.chat.id, photo_file, caption=f"<b>{name}</b>\n{desc}", parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {image_url}: {e}")
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è '{name}'.")
    show_main_menu(call.message)

# === üÜï –ö–ù–û–ü–ö–ê "–¢–ö–ê–ù–ò" –° –ü–û–î–ü–ê–ü–ö–ê–ú–ò ===
@bot.message_handler(func=lambda m: m.text == "üßµ –¢–∫–∞–Ω–∏")
def show_fabric_categories(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–∫–∞–Ω–µ–π."""
    categories = [
        "–∑–µ–±—Ä–∞", "—Ä—É–ª–æ–Ω–∫–∞", "–ø–ª–∏—Å—Å–µ", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ",
        "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–∫", "–¥–µ—Ä–µ–≤–æ50", "–¥–µ—Ä–µ–≤–æ25–º–º", "–∞–ª—é–º–∏–Ω–∏–π25–º–º"
    ]
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(cat, callback_data=f"fabric_{cat}") for cat in categories]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "üßµ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∫–∞–Ω–∏:*", reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('fabric_'))
def handle_fabric_category(call):
    category = call.data.split('_', 1)[1]
    show_fabric_samples(call.message, category, offset=0)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('fabric_next_'))
def handle_fabric_next(call):
    _, category, offset = call.data.split('_', 2)
    show_fabric_samples(call.message, category, offset=int(offset))
    bot.answer_callback_query(call.id)

def show_fabric_samples(message, category, offset=0, batch_size=10):
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –ø–∞–ø–∫–æ–π
    folder_map = {
        "–∑–µ–±—Ä–∞": "zebra",
        "—Ä—É–ª–æ–Ω–∫–∞": "rulonka",
        "–ø–ª–∏—Å—Å–µ": "plisse",
        "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": "vertikalnye",
        "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Å—Ç–∏–∫": "vertikalnye_plastik",
        "–¥–µ—Ä–µ–≤–æ50": "derevo50",
        "–¥–µ—Ä–µ–≤–æ25–º–º": "derevo25mm",
        "–∞–ª—é–º–∏–Ω–∏–π25–º–º": "alyuminij25mm"
    }
    
    folder = folder_map.get(category)
    if not folder:
        bot.send_message(message.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    path = f"fabric-samples/{folder}"
    if not os.path.exists(path):
        bot.send_message(message.chat.id, f"‚ùå –ü–∞–ø–∫–∞ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–∞–ø–∫–∞:\n`fabric-samples/{folder}/`\n–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã .jpg")
        return

    all_files = sorted([f for f in os.listdir(path) if f.lower().endswith('.jpg')])
    total = len(all_files)

    if total == 0:
        bot.send_message(message.chat.id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞–∑—Ü–æ–≤.")
        return

    files_to_send = all_files[offset:offset + batch_size]
    for filename in files_to_send:
        try:
            with open(f"{path}/{filename}", 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=f"‚Ä¢ {category}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {filename}: {e}")

    if offset + batch_size < total:
        next_offset = offset + batch_size
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"fabric_next_{category}_{next_offset}"))
        bot.send_message(message.chat.id, f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(offset+batch_size, total)} –∏–∑ {total} –æ–±—Ä–∞–∑—Ü–æ–≤.", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" ===
@bot.callback_query_handler(func=lambda call: call.data.startswith('details_'))
def handle_details_button(call):
    try:
        product_key = call.data.split('_', 1)[1]
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM products")
        all_products = cursor.fetchall()
        conn.close()

        product_name = "—Ç–æ–≤–∞—Ä"
        for (name,) in all_products:
            if hashlib.md5(name.encode()).hexdigest()[:8] == product_key:
                product_name = name
                break

        bot.send_message(
            call.message.chat.id,
            f"üìò *{product_name}*\n\n"
            "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É, –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä?\n\n"
            "üì≤ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:",
            parse_mode='Markdown',
            reply_markup=types.InlineKeyboardMarkup([
                [types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp", url="https://wa.me/79378222906")],
                [types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/astra_jalyzi30")]
            ])
        )
        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_details_button: {e}")
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def show_contacts(message):
    bot.reply_to(message, "üìç *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (937) 822-29-06\nüí¨ WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å](https://wa.me/79378222906)\n‚úâÔ∏è Telegram: [–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É](https://t.me/astra_jalyzi30)\n‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 9:00 ‚Äî 19:00\nüè† –ê–¥—Ä–µ—Å: –≥. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –æ—Ñ–∏—Å 5", parse_mode='Markdown', disable_web_page_preview=False)

@bot.message_handler(func=lambda m: m.text == "üí¨ WhatsApp")
def open_whatsapp(message):
    bot.reply_to(message, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ WhatsApp:\n\nhttps://wa.me/79378222906", reply_markup=types.InlineKeyboardMarkup([[types.InlineKeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url="https://wa.me/79378222906")]]))

@bot.message_handler(func=lambda m: m.text == "üîó –ö–∞–Ω–∞–ª")
def open_channel(message):
    bot.reply_to(message, f"üì¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª:\n\n{CHANNEL_ID}", disable_web_page_preview=False)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def send_help(message):
    bot.reply_to(message, "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n\n‚Ä¢ *–ö–∞—Ç–∞–ª–æ–≥* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ\n‚Ä¢ *–¢–∫–∞–Ω–∏* ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n‚Ä¢ *–ö–æ–Ω—Ç–∞–∫—Ç—ã* ‚Äî —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n‚Ä¢ *–ö–∞–Ω–∞–ª* ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n‚Ä¢ *WhatsApp* ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\nüí° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é ‚Äî –º—ã –ø–µ—Ä–µ–∑–≤–∞–Ω–∏–≤–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!", parse_mode='Markdown')

# === –ó–∞–∫–∞–∑ –∑–≤–æ–Ω–∫–∞ ===
@bot.callback_query_handler(func=lambda call: call.data == "request_call")
def request_call_handler(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*, –∏ –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!", parse_mode='Markdown', reply_markup=types.ReplyKeyboardMarkup([[types.KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]], resize_keyboard=True, one_time_keyboard=True))
    bot.register_next_step_handler(msg, process_phone_number, call.from_user.first_name)

def process_phone_number(message, user_name):
    phone = message.contact.phone_number if message.contact else message.text.strip()
    if not phone:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")
        return
    save_call_request(message.from_user.id, user_name, phone)
    notify_manager(user_name, phone)
    bot.send_message(message.chat.id, f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_name}!\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: `{phone}`\nüìû –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!", parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())

def save_call_request(user_id, first_name, phone_number):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO orders (user_id, user_name, phone, status) VALUES (?, ?, ?, ?)', (user_id, first_name, phone_number, "pending"))
    conn.commit()
    conn.close()

def notify_manager(user_name, phone_number):
    try:
        bot.send_message(MANAGER_CHAT_ID, f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!*\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", parse_mode='Markdown')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# === –í–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫ ===
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

@app.route('/')
def home():
    global _INITIALIZED
    if not _INITIALIZED:
        init_db()
        add_sample_data()
        hostname = "alekuk999-telegram-blinds-bot--f681.twc1.net"
        webhook_url = f"https://{hostname}/webhook"
        try:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=webhook_url)
            print(f"‚úÖ [WEBHOOK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            print(f"‚ùå [WEBHOOK] –û—à–∏–±–∫–∞: {e}")
        _INITIALIZED = True
    return jsonify({"status": "running", "version": "final"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
