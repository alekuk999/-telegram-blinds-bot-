# main.py
import os
import threading
import time
import logging
from datetime import datetime
import sqlite3
import hashlib
import random
import requests
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@astra_jaluzi")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
MANAGER_CHAT_ID = 7126605143  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ (int)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (pyTelegramBotAPI) ===
import telebot
from telebot import types

bot = telebot.TeleBot(BOT_TOKEN, threaded=True)

# === –ü—É—Ç—å –∫ –ë–î ===
DB_PATH = "blinds_bot.db"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    logger.info("üîß [DB] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            user_name TEXT,
            phone TEXT,
            address TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            is_from_user BOOLEAN,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            image_url TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            weekday INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscribers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("‚úÖ [DB] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ===
def add_sample_data():
    logger.info("üìö [DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "‚ú® *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏ –∏ –≥–æ—Å—Ç–∏–Ω–æ–π!*...", 0.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://img.freepik.com/free-photo/modern-living-room-interior-design_1268-16720.jpg"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "üîß *–ö–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º!*...", 0.0, "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "https://img.freepik.com/free-photo/vertical-blinds-window_1268-17953.jpg"),
            # ... –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        logger.info("‚úÖ [DB] –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    cursor.execute("SELECT COUNT(*) FROM smm_content")
    if cursor.fetchone()[0] == 0:
        logger.info("‚ÑπÔ∏è [DB] –¢–∞–±–ª–∏—Ü–∞ smm_content –ø—É—Å—Ç–∞ ‚Äî –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å GPT.")

    conn.commit()
    conn.close()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                   (user.id, user.username, user.first_name, user.last_name))
    conn.commit()
    conn.close()

def save_message(user_id, text, is_from_user):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO messages (user_id, message, is_from_user) VALUES (?, ?, ?)',
                   (user_id, text, is_from_user))
    conn.commit()
    conn.close()

def notify_manager(user_name, phone):
    try:
        bot.send_message(
            MANAGER_CHAT_ID,
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!*\n\nüë§ –ò–º—è: {user_name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone}`\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT ===
def generate_post_with_yandex_gpt(product_name, product_description):
    if not YANDEX_API_KEY or not YANDEX_FOLDER_ID:
        logger.error("‚ùå YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return None, None

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"  # ‚Üê –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞!
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEX_API_KEY}"  # ‚Üê –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!
    }
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∂–∞–ª—é–∑–∏ –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏.
–°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.

–¢–æ–≤–∞—Ä: {product_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {product_description}

–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
- –Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏)
- 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–Ω–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫)

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫",
    "content": "—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",
    "hashtags": ["#—Ö—ç—à—Ç–µ–≥1", "#—Ö—ç—à—Ç–µ–≥2", "#—Ö—ç—à—Ç–µ–≥3"]
}}
"""

    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 1000
        },
        "messages": [{"role": "user", "text": prompt}]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']

        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            post_data = json.loads(json_match.group())
            full_content = f"{post_data['content']}\n\n{' '.join(post_data['hashtags'])}"
            return post_data['title'], full_content
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            return None, None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {e}")
        return None, None

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
def auto_generate_and_publish_post():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, image_url FROM products ORDER BY RANDOM() LIMIT 1")
    product = cursor.fetchone()
    conn.close()

    if not product:
        logger.warning("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
        return

    name, desc, image_url = product
    title, content = generate_post_with_yandex_gpt(name, desc)

    if not title or not content:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        return

    try:
        caption = f"üìå *{title}*\n\n{content}"
        if image_url.startswith("http"):
            bot.send_photo(CHANNEL_ID, image_url, caption=caption, parse_mode='Markdown')
        else:
            with open(image_url, 'rb') as f:
                bot.send_photo(CHANNEL_ID, f, caption=caption, parse_mode='Markdown')
        logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {title}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def send_scheduled_posts():
    logger.info("‚è±Ô∏è [AUTOPOST] –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    last_auto_post_day = None
    while True:
        try:
            now = datetime.now()
            if now.hour == 10 and now.minute == 0:
                today = now.date()
                if last_auto_post_day != today:
                    auto_generate_and_publish_post()
                    last_auto_post_day = today
            time.sleep(60)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
            time.sleep(60)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞) ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.from_user)
    save_message(message.from_user.id, message.text, True)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìö –ö–∞—Ç–∞–ª–æ–≥", "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.add("üîó –ö–∞–Ω–∞–ª", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    markup.add("üí¨ WhatsApp", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    bot.reply_to(message, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: show_catalog, handle_category_selection –∏ —Ç.–¥. ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å)

# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω–µ –¥—É–±–ª–∏—Ä—É—é –≤—Å–µ, –Ω–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ Flask

# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    add_sample_data()

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
    autopost_thread = threading.Thread(target=send_scheduled_posts, daemon=True)
    autopost_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling!")
    bot.polling(none_stop=True, interval=0, timeout=20)
