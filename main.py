# blinds_bot.py
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from datetime import time, timezone
import random
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not CHANNEL_ID:
    raise ValueError("‚ùå CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

# === –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ ===

TIPS = [
    "üí° <b>–°–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:</b>\n–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –±–ª—ç–∫–∞—É—Ç-—Ç–∫–∞–Ω—å?\n‚Äî –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: –æ—Ç 300 –≥/–º¬≤\n‚Äî –¶–≤–µ—Ç: —Ç—ë–º–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –ª—É—á—à–µ –±–ª–æ–∫–∏—Ä—É—é—Ç —Å–≤–µ—Ç",
    "üî• <b>–õ–∞–π—Ñ—Ö–∞–∫:</b>\n–ß–∏—Å—Ç–∏—Ç–µ –∂–∞–ª—é–∑–∏ –≤–ª–∞–∂–Ω–æ–π –≥—É–±–∫–æ–π —Å –∫–∞–ø–ª–µ–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ—Å—É–¥—ã ‚Äî –ª–µ–≥–∫–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!",
    "‚úÖ <b>–ò–¥–µ—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–∫–æ–Ω:</b>\n–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã ¬´–¥–µ–Ω—å-–Ω–æ—á—å¬ª –≤–∏–∑—É–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∞—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!"
]

PROMOS = [
    "üéâ <b>–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏!</b>\n–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏!\n–¢–æ–ª—å–∫–æ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.\nüëâ –ù–∞–ø–∏—à–∏—Ç–µ ¬´–•–æ—á—É —Å–∫–∏–¥–∫—É¬ª ‚Äî –ø—Ä–∏—à–ª—ë–º –∑–∞–º–µ—Ä—â–∏–∫–∞!",
    "üöÄ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ 1 –¥–µ–Ω—å!</b>\n–ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤ —Å—É–±–±–æ—Ç—É!\n–¶–µ–Ω–∞ –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ + –ø–æ–¥–∞—Ä–æ–∫!"
]

WORKS = [
    {
        "photo": "https://img.freepik.com/free-photo/modern-living-room-interior-design_1268-16720.jpg",
        "caption": "‚ú® –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ –∫—É—Ö–Ω–∏\n‚Äî –¢–∫–∞–Ω—å: –±–ª—ç–∫–∞—É—Ç\n‚Äî –£—Å—Ç–∞–Ω–æ–≤–∫–∞: 1 —á–∞—Å\n‚Äî –¶–µ–Ω–∞: –æ—Ç 2990 ‚ÇΩ\n–ó–∞–∫–∞–∑–∞—Ç—å: @manager"
    },
    {
        "photo": "https://img.freepik.com/free-photo/vertical-blinds-window_1268-17953.jpg",
        "caption": "üõ† –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –≤ –æ—Ñ–∏—Å–µ\n‚Äî –¶–≤–µ—Ç: —Å–µ—Ä—ã–π –º–µ—Ç–∞–ª–ª–∏–∫\n‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ü–µ–ø–æ—á–∫–æ–π\n‚Äî –ì–∞—Ä–∞–Ω—Ç–∏—è: 2 –≥–æ–¥–∞"
    }
]

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT ===
async def generate_post_text(topic: str) -> str:
    if not YANDEX_API_KEY or not FOLDER_ID:
        return f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç: –Ω–µ –∑–∞–¥–∞–Ω—ã YANDEX_API_KEY –∏–ª–∏ FOLDER_ID.\n–¢–µ–º–∞: {topic}"

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∂–∞–ª—é–∑–∏ –∏ —à—Ç–æ—Ä.
–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É: "{topic}".
–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏.
–î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: "–ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ä ‚Üí @manager".
–û–±—ä—ë–º: 3-5 —Å—Ç—Ä–æ–∫.
    """

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 800
        },
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∂–∞–ª—é–∑–∏. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —è—Ä–∫–æ, —Å –ø–æ–ª—å–∑–æ–π."},
            {"role": "user", "text": prompt}
        ]
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π requests ‚Äî –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ aiohttp, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º
        response = requests.post(url, headers=headers, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            text = result['result']['alternatives'][0]['message']['text']
            return text[:1020] + "..." if len(text) > 1024 else text
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Yandex GPT: {response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}"
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç: {str(e)}"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∂–∞–ª—é–∑–∏.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/tip ‚Äî —Å–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞\n"
        "/promo ‚Äî –∞–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏\n"
        "/work ‚Äî —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç—ã\n"
        "/gpt [—Ç–µ–º–∞] ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –ò–ò\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        parse_mode="HTML"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/tip ‚Äî —Å–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É –∏–ª–∏ –≤—ã–±–æ—Ä—É\n"
        "/promo ‚Äî –∞–∫—Ü–∏—è\n"
        "/work ‚Äî —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
        "/gpt –¢–µ–º–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT\n\n"
        f"–ë–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª: {CHANNEL_ID}",
        parse_mode="HTML"
    )

async def tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(TIPS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –°–æ–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")

async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(PROMOS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –ê–∫—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏: {e}")

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item = random.choice(WORKS)
    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=item["photo"],
            caption=item["caption"]
        )
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Ä–∞–±–æ—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")

async def gpt_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üìå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/gpt –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã?")
        return

    topic = " ".join(context.args)
    await update.message.reply_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç —á–µ—Ä–µ–∑ Yandex GPT...")

    generated_text = await generate_post_text(topic)

    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=generated_text, parse_mode="HTML")
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"
        await update.message.reply_text(error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é) ===
async def daily_morning(context: ContextTypes.DEFAULT_TYPE):
    tip_text = random.choice(TIPS)
    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=tip_text, parse_mode="HTML")
        logger.info("‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")

async def daily_afternoon(context: ContextTypes.DEFAULT_TYPE):
    item = random.choice(WORKS)
    try:
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=item["photo"],
            caption=item["caption"]
        )
        logger.info("‚úÖ –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("tip", tip))
    application.add_handler(CommandHandler("promo", promo))
    application.add_handler(CommandHandler("work", work))
    application.add_handler(CommandHandler("gpt", gpt_post))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    # ‚ö†Ô∏è –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º timezone, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç UTC
    job_queue = application.job_queue

    # –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ú–°–ö (UTC+3)
    job_queue.run_daily(
        daily_morning,
        time=time(hour=10, minute=0, tzinfo=timezone.utc)  # 10:00 UTC = 13:00 –ú–°–ö
    )
    job_queue.run_daily(
        daily_afternoon,
        time=time(hour=12, minute=0, tzinfo=timezone.utc)  # 12:00 UTC = 15:00 –ú–°–ö
    )

    # –ò–õ–ò –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ –ú–°–ö):
    # job_queue.run_daily(daily_morning, time=time(hour=10, minute=0))
    # job_queue.run_daily(daily_afternoon, time=time(hour=15, minute=0))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: 13:00 –∏ 15:00 –ú–°–ö (UTC+3)")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    application.run_polling()

if __name__ == "__main__":
    main()
