# main.py
import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_application = None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª—é–∑–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/open ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∂–∞–ª—é–∑–∏\n"
        "/close ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∂–∞–ª—é–∑–∏\n"
        "/status ‚Äî —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–∑–≤–∞–ª /start")


async def open_blinds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç—å –∂–∞–ª—é–∑–∏"""
    await update.message.reply_text("‚úÖ –ñ–∞–ª—é–∑–∏ –æ—Ç–∫—Ä—ã—Ç—ã")
    logger.info(f"–ñ–∞–ª—é–∑–∏ –æ—Ç–∫—Ä—ã—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")


async def close_blinds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞: –∑–∞–∫—Ä—ã—Ç—å –∂–∞–ª—é–∑–∏"""
    await update.message.reply_text("‚ùå –ñ–∞–ª—é–∑–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    logger.info(f"–ñ–∞–ª—é–∑–∏ –∑–∞–∫—Ä—ã—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    await update.message.reply_text("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–∞–ª—é–∑–∏ –æ—Ç–∫—Ä—ã—Ç—ã")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
@app.on_event("startup")
async def startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    global bot_application

    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("üõë –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        raise RuntimeError("TELEGRAM_TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!")

    # –°–æ–∑–¥–∞—ë–º Application
    bot_application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot_application.add_handler(CommandHandler("start", start))
    bot_application.add_handler(CommandHandler("open", open_blinds))
    bot_application.add_handler(CommandHandler("close", close_blinds))
    bot_application.add_handler(CommandHandler("status", status))

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # bot_application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")


# --- –í–µ–±—Ö—É–∫ –¥–ª—è Telegram ---
@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É
    """
    global bot_application

    expected_token = os.getenv("TELEGRAM_TOKEN")
    if not expected_token:
        logger.error("üõë TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return PlainTextResponse("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", status_code=500)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ URL
    if token != expected_token:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –≤–µ–±—Ö—É–∫–µ: {token}")
        return PlainTextResponse("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω", status_code=403)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
    if bot_application is None:
        logger.error("‚ùå bot_application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return PlainTextResponse("–ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤", status_code=500)

    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = await request.json()
        update = Update.de_json(json_data, bot_application.bot)

        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await bot_application.process_update(update)
        logger.info("üì© –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return PlainTextResponse("OK", status_code=200)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return PlainTextResponse("–û—à–∏–±–∫–∞", status_code=500)


# --- Health-check ---
@app.get("/")
def health():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    return {
        "status": "—Ä–∞–±–æ—Ç–∞–µ—Ç",
        "bot": "–≥–æ—Ç–æ–≤" if bot_application else "–Ω–µ –≥–æ—Ç–æ–≤",
        "message": "Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª—é–∑–∏"
    }


@app.get("/health")
def health_detailed():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    return {
        "status": "healthy",
        "bot_initialized": bot_application is not None,
        "telegram_token_set": bool(os.getenv("TELEGRAM_TOKEN")),
    }
