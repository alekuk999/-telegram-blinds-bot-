# main.py
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# === –ö–æ–Ω—Ç–µ–Ω—Ç ===
TIPS = ["üí° –°–æ–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞: –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∫–∞–Ω—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é 300+ –≥/–º¬≤"]
PROMOS = ["üéâ –ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏: —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –∂–∞–ª—é–∑–∏"]

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∂–∞–ª—é–∑–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/tip /promo /work")

async def tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = random.choice(TIPS)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("tip", tip))

    # –ù–∞—á–∏–Ω–∞–µ–º polling
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.start()
    await app.updater.start_polling()
    await app.idle()

if __name__ == "__main__":
    asyncio.run(main())
