import os
import threading
import time
import logging
from datetime import datetime, time as dt_time
import sqlite3
import hashlib
import openai

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger("gunicorn").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

from flask import Flask, request, jsonify
import telebot
from telebot import types

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
app = Flask(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

CHANNEL_ID = os.getenv("CHANNEL_ID", "@astra_jaluzi")
PORT = int(os.getenv("PORT", 8000))

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

# === OpenAI ‚Äî —Ç–≤–æ–π –∫–ª—é—á —É–∂–µ –≤—à–∏—Ç ===
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "blinds_bot.db"
MANAGER_CHAT_ID = 7126605143
_INITIALIZED = False

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL,
            category TEXT,
            image_url TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS smm_content (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT,
            category TEXT,
            scheduled_time TIMESTAMP,
            is_published BOOLEAN DEFAULT 0,
            weekday INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")

# === –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ===
def add_sample_data():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        products = [
            ("–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –¥–µ–Ω—å-–Ω–æ—á—å", "‚ú® –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ø–∞–ª—å–Ω–∏! –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –ø–ª–æ—Ç–Ω—ã—Ö –ø–æ–ª–æ—Å. –ú–∞—Ç–µ—Ä–∏–∞–ª: –ø–æ–ª–∏—ç—Å—Ç–µ—Ä. –¶–≤–µ—Ç–∞: –±–µ–ª—ã–π, –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä—ã–π.", 0.0, "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "https://i.imgur.com/rulon_day_night.jpg"),
            ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ", "üîß –ö–ª–∞—Å—Å–∏–∫–∞! –õ–∞–º–µ–ª–∏ 25 –º–º, –Ω–µ —Ä–∂–∞–≤–µ—é—Ç. –¶–≤–µ—Ç–∞: –±–µ–ª—ã–π, —Å–µ—Ä–µ–±—Ä–æ, –¥–µ—Ä–µ–≤–æ. –î–ª—è –∫—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω–æ–π.", 0.0, "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "https://i.imgur.com/horiz_alum.jpg"),
            ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ –ü–í–•", "üíß –ü—Ä–∞–∫—Ç–∏—á–Ω–æ! –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ, –ª–µ–≥–∫–æ –º–æ—é—Ç—Å—è. –¶–≤–µ—Ç–∞: –±–µ–ª—ã–π, –±–µ–∂–µ–≤—ã–π, –∏–º–∏—Ç–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞. –î–ª—è –∫—É—Ö–Ω–∏ –∏ –±–∞–ª–∫–æ–Ω–∞.", 0.0, "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏", "https://i.imgur.com/vert_pvh.jpg"),
        ]
        cursor.executemany("INSERT INTO products (name, description, price, category, image_url) VALUES (?, ?, ?, ?, ?)", products)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    conn.commit()
    conn.close()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI ===
def generate_smm_post_with_ai(topic):
    system_prompt = f"""
–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏, –ø—Ä–æ–¥–∞—ë—à—å –∂–∞–ª—é–∑–∏ –∏ —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã.
–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ {CHANNEL_ID} ‚Äî ‚Äú–†–£–õ–û–ù–ù–´–ï –®–¢–û–†–´ –ñ–ê–õ–Æ–ó–ò –ê–°–¢–†–ê–•–ê–ù–¨‚Äù.

–§–æ—Ä–º–∞—Ç:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 8 —Å–ª–æ–≤, —Å —ç–º–æ–¥–∑–∏)
- –¢–µ–∫—Å—Ç (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤, –∞–±–∑–∞—Ü—ã, 1‚Äì3 —ç–º–æ–¥–∑–∏)
- –ü—Ä–∏–∑—ã–≤: ‚Äú–ü–∏—à–∏—Ç–µ –≤ –õ–°‚Äù, ‚Äú–ó–≤–æ–Ω–∏—Ç–µ‚Äù, ‚Äú–£—Å–ø–µ–π—Ç–µ –¥–æ...‚Äù
- –•—ç—à—Ç–µ–≥–∏: #–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å #–∂–∞–ª—é–∑–∏–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å #—Ä—É–ª–æ–Ω–Ω—ã–µ—à—Ç–æ—Ä—ã–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω–∏:
- –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫—É—é –∂–∞—Ä—É ‚Äî ‚Äú—Å–ø–∞—Å—ë–º –æ—Ç +40¬∞C‚Äù
- –ë—ã—Å—Ç—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É ‚Äî ‚Äú–∑–∞ 1 –¥–µ–Ω—å‚Äù
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä
- WhatsApp: https://wa.me/79378222906
–¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–µ—Å—Ç–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}"}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"‚ùå OpenAI –æ—à–∏–±–∫–∞: {e}")
        return None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ===
def save_and_publish_post(topic, content):
    if not content:
        return False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO smm_content (title, content, category, scheduled_time, is_published)
        VALUES (?, ?, ?, ?, ?)
    ''', (topic, content, "AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", datetime.now(), 1))
    conn.commit()
    conn.close()

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        bot.send_message(CHANNEL_ID, content, parse_mode='HTML')
        logging.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {topic}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ 9:00 ===
def ai_autoposting_worker():
    logging.info("ü§ñ AI-–∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    last_post_date = None

    while True:
        try:
            now = datetime.now()
            if last_post_date == now.date():
                time.sleep(60)
                continue

            if now.time() >= dt_time(9, 0):
                topics = [
                    "–ü–æ—á–µ–º—É —Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ª—É—á—à–µ –∑–∞–Ω–∞–≤–µ—Å–æ–∫?",
                    "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∂–∞–ª—é–∑–∏ –¥–ª—è –∫—É—Ö–Ω–∏?",
                    "–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –∂–∞–ª—é–∑–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ–π",
                    "–ñ–∞–ª—é–∑–∏ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å—Ç–∏–ª—å–Ω–æ",
                    "–ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–π –∂–∞—Ä—ã",
                    "–¢—Ä–µ–Ω–¥—ã 2025 –≤ –º–∏—Ä–µ –∂–∞–ª—é–∑–∏",
                    "–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî –∑–∞ 1 –¥–µ–Ω—å!",
                    "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä –≤ –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏",
                ]
                topic = topics[now.day % len(topics)]

                logging.info(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç: {topic}")
                post = generate_smm_post_with_ai(topic)

                if post and save_and_publish_post(topic, post):
                    last_post_date = now.date()
                    logging.info(f"üéâ –£—Å–ø–µ—à–Ω–æ: {topic}")

            time.sleep(60)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")
            time.sleep(60)

def start_ai_autoposting():
    thread = threading.Thread(target=ai_autoposting_worker, daemon=True)
    thread.start()

# === –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ *–†–£–õ–û–ù–ù–´–ï –®–¢–û–†–´ –ñ–ê–õ–Æ–ó–ò –ê–°–¢–†–ê–•–ê–ù–¨*.\n–ö–∞–Ω–∞–ª: {CHANNEL_ID}\nWhatsApp: https://wa.me/79378222906", parse_mode='Markdown')

# === –í–µ–±—Ö—É–∫ ===
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'OK', 200

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
@app.route('/')
def home():
    global _INITIALIZED
    if not _INITIALIZED:
        init_db()
        add_sample_data()
        start_ai_autoposting()
        _INITIALIZED = True
    return jsonify({"status": "running", "channel": CHANNEL_ID}), 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
