# app.py
import os
import logging
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render) ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com
PORT = int(os.getenv("PORT", 8000))

if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not WEBHOOK_URL:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üé® –ö–∞—Ç–∞–ª–æ–≥ —à—Ç–æ—Ä", callback_data="catalog")],
        [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ä", url="https://t.me/yourmanager")],
        [InlineKeyboardButton("üñº –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data="portfolio")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
            "–ú—ã –¥–µ–ª–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ **—Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏** –Ω–∞ –∑–∞–∫–∞–∑.\n"
            "–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è, —Å–∫–∏–¥–∫–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
            "–ú—ã –¥–µ–ª–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ **—Ä—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏** –Ω–∞ –∑–∞–∫–∞–∑.\n"
            "–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è, —Å–∫–∏–¥–∫–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "catalog":
        text = (
            "üì¶ **–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏**:\n\n"
            "‚Ä¢ –†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã ¬´–î–µ–Ω—å-–Ω–æ—á—å¬ª ‚Äî –æ—Ç 1500 ‚ÇΩ/–º¬≤\n"
            "‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–ª—é–∑–∏ ‚Äî –æ—Ç 1200 ‚ÇΩ/–º¬≤\n"
            "‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ ‚Äî –æ—Ç 1000 ‚ÇΩ/–º¬≤\n"
            "‚Ä¢ –¢–∫–∞–Ω–µ–≤—ã–µ —Ä–æ–ª–ª–µ—Ç—ã ‚Äî –æ—Ç 1800 ‚ÇΩ/–º¬≤\n\n"
            "üìè –ó–∞–º–µ—Ä ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!\n"
            "üìû –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @yourmanager"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown")

    elif query.data == "portfolio":
        text = (
            "üì∏ **–ù–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–±–æ—Ç—ã**:\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫:\n"
            "üëâ https://t.me/your_portfolio_channel\n\n"
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown")


async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /contact"""
    await update.message.reply_text(
        "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä: @yourmanager\n"
        "–†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00\n"
        "–ó–∞–º–µ—Ä ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —á–µ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞."
    )


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üôè\n"
        "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ä ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @yourmanager"
    )


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
async def setup_application(application: Application):
    """–î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("contact", contact))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"{WEBHOOK_URL}/webhook"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route("/")
def index():
    return "<h1>–ë–æ—Ç –¥–ª—è –∂–∞–ª—é–∑–∏ –∑–∞–ø—É—â–µ–Ω ‚úÖ</h1>", 200


@app.route("/webhook", methods=["POST"])
async def webhook():
    """–ü—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Empty data"}), 400

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(data, bot_app.bot)

        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞
        await bot_app.update_queue.put(update)

        return jsonify({"ok": True}), 200

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return jsonify({"error": str(e)}), 500


# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ ===
bot_app = None


@app.before_first_request
async def initialize():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ (Render –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å /)"""
    global bot_app
    if bot_app is None:
        bot_app = (
            Application.builder()
            .token(TOKEN)
            .updater(None)  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π polling
            .build()
        )
        await setup_application(bot_app)
        logger.info("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–¥–ª—è Render) ===
if __name__ == "__main__":
    import asyncio

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ Render)
    async def run():
        global bot_app
        bot_app = Application.builder().token(TOKEN).build()
        await setup_application(bot_app)
        await bot_app.run_polling()

    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ
    # asyncio.run(run())
